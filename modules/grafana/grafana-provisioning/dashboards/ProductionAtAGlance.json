{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": "-- Grafana --",
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "limit": 100,
        "name": "Annotations & Alerts",
        "showIn": 0,
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "gnetId": null,
  "graphTooltip": 0,
  "id": 14,
  "iteration": 1591995668192,
  "links": [],
  "panels": [
    {
      "collapsed": false,
      "datasource": "",
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 39,
      "panels": [],
      "repeat": "Source",
      "scopedVars": {
        "Source": {
          "selected": true,
          "text": "urn:edgevm3.internal.cloudapp.net:OPC-Site-01",
          "value": "urn:edgevm3.internal.cloudapp.net:OPC-Site-01"
        }
      },
      "title": "[[Source]]",
      "type": "row"
    },
    {
      "datasource": "myinfluxdb",
      "gridPos": {
        "h": 7,
        "w": 4,
        "x": 0,
        "y": 1
      },
      "id": 17,
      "options": {
        "colorMode": "value",
        "fieldOptions": {
          "calcs": [
            "mean"
          ],
          "defaults": {
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "#a1414a",
                  "value": null
                },
                {
                  "color": "#f2a104",
                  "value": 0.85
                },
                {
                  "color": "#00743f",
                  "value": 0.9
                }
              ]
            },
            "title": "",
            "unit": "percentunit"
          },
          "overrides": [],
          "values": false
        },
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto"
      },
      "pluginVersion": "6.7.1",
      "repeat": null,
      "repeatDirection": "v",
      "scopedVars": {
        "Source": {
          "selected": true,
          "text": "urn:edgevm3.internal.cloudapp.net:OPC-Site-01",
          "value": "urn:edgevm3.internal.cloudapp.net:OPC-Site-01"
        }
      },
      "targets": [
        {
          "query": "import \"math\"\r\nimport \"csv\"\r\n\r\nStatusValuesForOn = [101,105,108]\r\n\r\nfGetLastStatus = () => {\r\ndummyRecordCsv = \"#datatype,string,long,dateTime:RFC3339,dateTime:RFC3339,dateTime:RFC3339,double,string,string,string\\n#group,false,false,true,true,false,false,true,true,true\\n#default,_result,,,,,,,,\\n,result,table,_start,_stop,_time,_value,Source,_field,_measurement\\n,,0,2030-01-01T00:00:00.0Z,2030-01-01T00:00:00.0Z,2030-01-01T00:00:00.0Z,0,,STATUS,DeviceData\"\r\n\r\ndummyRecord=csv.from(csv: dummyRecordCsv )\r\n\r\nfirstStatusTimestampTemp=\r\n  from(bucket: \"telemetry\")\r\n  |> range([[range]])\r\n  |> filter(fn: (r) => r._measurement == \"DeviceData\" )\r\n  |> filter(fn: (r) => r.Source       == \"[[Source]]\" )\r\n  |> filter(fn: (r) => r._field       == \"STATUS\" )\r\n  |> first()\r\n\r\nfirstStatusTimestamp=\r\n     union(tables: [firstStatusTimestampTemp,dummyRecord])\r\n  |> tableFind(fn: (key) => key._field == \"STATUS\"  )\r\n  |> getColumn(column: \"_time\")\r\n\r\nlastStatusBeforeRangeTemp=\r\nfrom(bucket: \"telemetry\")\r\n  |> range(start:-1000d, \r\n           stop: time(v:uint(v:firstStatusTimestamp[0])-uint(v:1)))\r\n  |> filter(fn: (r) => r._measurement == \"DeviceData\" )\r\n  |> filter(fn: (r) => r.Source       == \"[[Source]]\" )\r\n  |> map(fn: (r) => ({\r\n        _field: \"STATUS\",\r\n        _time: r._time, \r\n        _value: float(v: contains(value: int(v: r._value),\r\n                                  set  : StatusValuesForOn ))\r\n      }))\r\n  |> last()\r\n\r\nlastStatusBeforeRange=\r\n     union(tables: [lastStatusBeforeRangeTemp,dummyRecord])\r\n  |> tableFind(fn: (key) => key._field == \"STATUS\"  )\r\n  |> getColumn(column: \"_value\")         \r\n\r\nreturn lastStatusBeforeRange[length(arr:lastStatusBeforeRange)-1]\r\n}\r\n\r\nDeviceData=from(bucket: \"telemetry\")\r\n  |> range([[range]])\r\n  |> filter(fn: (r) => r._measurement == \"DeviceData\" )\r\n  |> filter(fn: (r) => r.Source       == \"[[Source]]\" )\r\n\r\n \r\nStatusData=\r\n  DeviceData\r\n  |> filter(fn: (r) =>  r._field == \"STATUS\")\r\n  |> map(fn: (r) => ({\r\n      _time: r._time, \r\n      _value: float(v: contains(value: int(v: r._value), \r\n                                       set: StatusValuesForOn ))\r\n  }))\r\n\r\n\r\nStatusDataWindowed=\r\n  StatusData\r\n  |> aggregateWindow(every: 1m, fn: mean)\r\n  |> fill(column: \"_value\", usePrevious: true) \r\n  |> fill(column: \"_value\", value: fGetLastStatus()) \r\n  |> map(fn: (r) => ({_time: r._time, _value: math.ceil(x: r._value)}))\r\n  \r\nRunningMins=\r\n  StatusDataWindowed\r\n  |> sum()\r\n  |> map(fn: (r) => ({\r\n     _value: r._value,\r\n     _time: now()\r\n    }))\r\n\r\n  \r\nIdleMins=\r\n  StatusDataWindowed\r\n  |> map(fn: (r) => ({\r\n     _value: 1.0 - r._value,\r\n     _time: r._time,\r\n    }))\r\n  |> sum()\r\n  |> map(fn: (r) => ({\r\n     _value: r._value,\r\n     _time: now()\r\n    }))\r\n\r\n\r\nAvailability=\r\n  join(\r\n    tables: {on: RunningMins, off: IdleMins},\r\n    on: [\"_time\"]\r\n  )\r\n  |> map(fn: (r) => ({\r\n     _value: if r._value_on+r._value_off == 0.0 then 0.0 \r\n             else r._value_on/(r._value_on+r._value_off),\r\n     _time: r._time,\r\n     _field: \"Availability\"\r\n    }))\r\n  |> yield(name: \"Availability\")\r\n",
          "refId": "A"
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "Availability",
      "type": "stat"
    },
    {
      "content": "<div align=center>\r\n\r\n<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0\r\n style='border:none;'>\r\n <tr style=''>\r\n  <td width=623 style='height:190.0pt'>\r\n  <p align=center style='text-align:center'><b><span style='font-size:60.0pt;color:grey'>X</span></b></p>\r\n  </td>\r\n </tr>\r\n</table>\r\n\r\n</div>",
      "datasource": "InfluxDB",
      "description": "",
      "gridPos": {
        "h": 7,
        "w": 2,
        "x": 4,
        "y": 1
      },
      "id": 22,
      "mode": "html",
      "repeat": null,
      "repeatDirection": "v",
      "scopedVars": {
        "Source": {
          "selected": true,
          "text": "urn:edgevm3.internal.cloudapp.net:OPC-Site-01",
          "value": "urn:edgevm3.internal.cloudapp.net:OPC-Site-01"
        }
      },
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "text"
    },
    {
      "datasource": "myinfluxdb",
      "gridPos": {
        "h": 7,
        "w": 4,
        "x": 6,
        "y": 1
      },
      "id": 14,
      "options": {
        "colorMode": "value",
        "fieldOptions": {
          "calcs": [
            "mean"
          ],
          "defaults": {
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "#a1414a",
                  "value": null
                },
                {
                  "color": "#f2a104",
                  "value": 0.9
                },
                {
                  "color": "#00743f",
                  "value": 0.95
                }
              ]
            },
            "title": "",
            "unit": "percentunit"
          },
          "overrides": [],
          "values": false
        },
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto"
      },
      "pluginVersion": "6.7.1",
      "repeat": null,
      "repeatDirection": "v",
      "scopedVars": {
        "Source": {
          "selected": true,
          "text": "urn:edgevm3.internal.cloudapp.net:OPC-Site-01",
          "value": "urn:edgevm3.internal.cloudapp.net:OPC-Site-01"
        }
      },
      "targets": [
        {
          "query": "DeviceData=from(bucket: \"telemetry\")\r\n  |> range([[range]])\r\n  |> filter(fn: (r) => r._measurement == \"DeviceData\" )\r\n  |> filter(fn: (r) => r.Source       == \"[[Source]]\" )\r\n  |> keep(columns: [\"_time\",\"_field\",\"_value\"])\r\n \r\nItemCountGoodData=\r\n  DeviceData\r\n  |> filter(fn: (r) => r._field == \"ITEM_COUNT_GOOD\" )\r\n  |> aggregateWindow(every: 1m, fn: sum)\r\n  |> sum()\r\n  |> map(fn: (r) => ({\r\n     _value: r._value,\r\n     _time: now()\r\n    }))\r\n\r\nItemCountBadData=\r\n  DeviceData\r\n  |> filter(fn: (r) => r._field == \"ITEM_COUNT_BAD\" )\r\n  |> aggregateWindow(every: 1m, fn: sum)\r\n  |> sum()\r\n  |> map(fn: (r) => ({\r\n     _value: r._value,\r\n     _time: now()\r\n    }))\r\n\r\nQuality=\r\n  join(\r\n    tables: {good: ItemCountGoodData, bad: ItemCountBadData},\r\n    on: [\"_time\"]\r\n  )\r\n  |> map(fn: (r) => ({\r\n     _value: if r._value_good+r._value_bad == 0.0 then 0.0 \r\n             else r._value_good/(r._value_good+r._value_bad),\r\n     _time: r._time,\r\n     _field: \"Quality\"\r\n    }))\r\n  |> yield(name: \"Quality\")\r\n",
          "refId": "A"
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "Quality",
      "type": "stat"
    },
    {
      "content": "<div align=center>\r\n\r\n<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0\r\n style='border:none;'>\r\n <tr style=''>\r\n  <td width=623 style='height:190.0pt'>\r\n  <p align=center style='text-align:center'><b><span style='font-size:60.0pt;color:grey'>X</span></b></p>\r\n  </td>\r\n </tr>\r\n</table>\r\n\r\n</div>",
      "datasource": "InfluxDB",
      "description": "",
      "gridPos": {
        "h": 7,
        "w": 2,
        "x": 10,
        "y": 1
      },
      "id": 25,
      "mode": "html",
      "repeat": null,
      "repeatDirection": "v",
      "scopedVars": {
        "Source": {
          "selected": true,
          "text": "urn:edgevm3.internal.cloudapp.net:OPC-Site-01",
          "value": "urn:edgevm3.internal.cloudapp.net:OPC-Site-01"
        }
      },
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "text"
    },
    {
      "datasource": "myinfluxdb",
      "gridPos": {
        "h": 7,
        "w": 4,
        "x": 12,
        "y": 1
      },
      "id": 18,
      "options": {
        "colorMode": "value",
        "fieldOptions": {
          "calcs": [
            "mean"
          ],
          "defaults": {
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "#a1414a",
                  "value": null
                },
                {
                  "color": "#f2a104",
                  "value": 0.9
                },
                {
                  "color": "#00743f",
                  "value": 0.95
                }
              ]
            },
            "title": "",
            "unit": "percentunit"
          },
          "overrides": [],
          "values": false
        },
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto"
      },
      "pluginVersion": "6.7.1",
      "repeat": null,
      "repeatDirection": "v",
      "scopedVars": {
        "Source": {
          "selected": true,
          "text": "urn:edgevm3.internal.cloudapp.net:OPC-Site-01",
          "value": "urn:edgevm3.internal.cloudapp.net:OPC-Site-01"
        }
      },
      "targets": [
        {
          "query": "import \"math\"\r\nimport \"csv\"\r\n\r\nStatusValuesForOn = [101,105,108]\r\n\r\nfGetLastStatus = () => {\r\ndummyRecordCsv = \"#datatype,string,long,dateTime:RFC3339,dateTime:RFC3339,dateTime:RFC3339,double,string,string,string\\n#group,false,false,true,true,false,false,true,true,true\\n#default,_result,,,,,,,,\\n,result,table,_start,_stop,_time,_value,Source,_field,_measurement\\n,,0,2030-01-01T00:00:00.0Z,2030-01-01T00:00:00.0Z,2030-01-01T00:00:00.0Z,0,,STATUS,DeviceData\"\r\n\r\ndummyRecord=csv.from(csv: dummyRecordCsv )\r\n\r\nfirstStatusTimestampTemp=\r\n  from(bucket: \"telemetry\")\r\n  |> range([[range]])\r\n  |> filter(fn: (r) => r._measurement == \"DeviceData\" )\r\n  |> filter(fn: (r) => r.Source       == \"[[Source]]\" )\r\n  |> filter(fn: (r) => r._field       == \"STATUS\" )\r\n  |> first()\r\n\r\nfirstStatusTimestamp=\r\n     union(tables: [firstStatusTimestampTemp,dummyRecord])\r\n  |> tableFind(fn: (key) => key._field == \"STATUS\"  )\r\n  |> getColumn(column: \"_time\")\r\n\r\nlastStatusBeforeRangeTemp=\r\nfrom(bucket: \"telemetry\")\r\n  |> range(start:-1000d, \r\n           stop: time(v:uint(v:firstStatusTimestamp[0])-uint(v:1)))\r\n  |> filter(fn: (r) => r._measurement == \"DeviceData\" )\r\n  |> filter(fn: (r) => r.Source       == \"[[Source]]\" )\r\n  |> map(fn: (r) => ({\r\n        _field: \"STATUS\",\r\n        _time: r._time, \r\n        _value: float(v: contains(value: int(v: r._value),\r\n                                  set  : StatusValuesForOn ))\r\n      }))\r\n  |> last()\r\n\r\nlastStatusBeforeRange=\r\n     union(tables: [lastStatusBeforeRangeTemp,dummyRecord])\r\n  |> tableFind(fn: (key) => key._field == \"STATUS\"  )\r\n  |> getColumn(column: \"_value\")         \r\n\r\nreturn lastStatusBeforeRange[length(arr:lastStatusBeforeRange)-1]\r\n}\r\n\r\nDeviceData=from(bucket: \"telemetry\")\r\n  |> range([[range]])\r\n  |> filter(fn: (r) => r._measurement == \"DeviceData\" )\r\n  |> filter(fn: (r) => r.Source       == \"[[Source]]\" )\r\n  |> group()\r\n  |> keep(columns: [\"_time\",\"_field\",\"_value\"])\r\n\r\nItemCountGoodData=\r\n  DeviceData\r\n  |> filter(fn: (r) => r._field == \"ITEM_COUNT_GOOD\" )\r\n  |> aggregateWindow(every: 1m, fn: sum)\r\n  |> sum()\r\n  |> map(fn: (r) => ({\r\n     _value: r._value,\r\n     _time: now()\r\n    }))\r\n\r\nStatusData=\r\n  DeviceData\r\n  |> filter(fn: (r) =>  r._field == \"STATUS\")\r\n  |> map(fn: (r) => ({\r\n      _time: r._time, \r\n      _value: float(v: contains(value: int(v: r._value), \r\n                                       set: StatusValuesForOn ))\r\n  }))\r\n\r\nStatusDataWindowed=\r\n  StatusData\r\n  |> aggregateWindow(every: 1m, fn: mean)\r\n  |> fill(column: \"_value\", usePrevious: true) \r\n  |> fill(column: \"_value\", value: fGetLastStatus()) \r\n  |> map(fn: (r) => ({_time: r._time, _value: math.ceil(x: r._value)}))\r\n  \r\nRunningMins=\r\n  StatusDataWindowed\r\n  |> sum()\r\n  |> map(fn: (r) => ({\r\n     _value: r._value,\r\n     _time: now()\r\n    }))\r\n\r\nPerformance=\r\n  join(\r\n    tables: {good: ItemCountGoodData, on: RunningMins},\r\n    on: [\"_time\"]\r\n  )\r\n  |> map(fn: (r) => ({\r\n     _value: if r._value_on == 0.0 or float(v:$idealRunrate) == 0.0 then 0.0 \r\n             else (r._value_good/r._value_on)/float(v:$idealRunrate),\r\n     _time: r._time,\r\n     _value_on : r._value_on, _value_good: r._value_good,\r\n     _field: \"Performance\"\r\n    }))\r\n  |> yield(name: \"Performance\")\r\n",
          "refId": "A"
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "Performance",
      "type": "stat"
    },
    {
      "content": "<div align=center>\r\n\r\n<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0\r\n style='border:none;'>\r\n <tr style=''>\r\n  <td width=623 style='height:190.0pt'>\r\n  <p align=center style='text-align:center'><b><span style='font-size:60.0pt;color:grey'>=</span></b></p>\r\n  </td>\r\n </tr>\r\n</table>\r\n\r\n</div>",
      "datasource": "InfluxDB",
      "description": "",
      "gridPos": {
        "h": 7,
        "w": 2,
        "x": 16,
        "y": 1
      },
      "id": 26,
      "mode": "html",
      "repeat": null,
      "repeatDirection": "v",
      "scopedVars": {
        "Source": {
          "selected": true,
          "text": "urn:edgevm3.internal.cloudapp.net:OPC-Site-01",
          "value": "urn:edgevm3.internal.cloudapp.net:OPC-Site-01"
        }
      },
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "text"
    },
    {
      "cacheTimeout": null,
      "datasource": "myinfluxdb",
      "gridPos": {
        "h": 7,
        "w": 6,
        "x": 18,
        "y": 1
      },
      "id": 19,
      "links": [],
      "options": {
        "colorMode": "value",
        "fieldOptions": {
          "calcs": [
            "mean"
          ],
          "defaults": {
            "mappings": [
              {
                "id": 0,
                "op": "=",
                "text": "N/A",
                "type": 1,
                "value": "null"
              }
            ],
            "nullValueMode": "connected",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "#a1414a",
                  "value": null
                },
                {
                  "color": "#f2a104",
                  "value": 0.85
                },
                {
                  "color": "#00743f",
                  "value": 0.9
                }
              ]
            },
            "title": "",
            "unit": "percentunit"
          },
          "limit": 1,
          "overrides": [],
          "values": false
        },
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto"
      },
      "pluginVersion": "6.7.1",
      "repeat": null,
      "repeatDirection": "v",
      "scopedVars": {
        "Source": {
          "selected": true,
          "text": "urn:edgevm3.internal.cloudapp.net:OPC-Site-01",
          "value": "urn:edgevm3.internal.cloudapp.net:OPC-Site-01"
        }
      },
      "targets": [
        {
          "query": "import \"math\"\r\nimport \"csv\"\r\n\r\nStatusValuesForOn = [101,105,108]\r\n\r\nfGetLastStatus = () => {\r\ndummyRecordCsv = \"#datatype,string,long,dateTime:RFC3339,dateTime:RFC3339,dateTime:RFC3339,double,string,string,string\\n#group,false,false,true,true,false,false,true,true,true\\n#default,_result,,,,,,,,\\n,result,table,_start,_stop,_time,_value,Source,_field,_measurement\\n,,0,2030-01-01T00:00:00.0Z,2030-01-01T00:00:00.0Z,2030-01-01T00:00:00.0Z,0,,STATUS,DeviceData\"\r\n\r\ndummyRecord=csv.from(csv: dummyRecordCsv )\r\n\r\nfirstStatusTimestampTemp=\r\n  from(bucket: \"telemetry\")\r\n  |> range([[range]])\r\n  |> filter(fn: (r) => r._measurement == \"DeviceData\" )\r\n  |> filter(fn: (r) => r.Source       == \"[[Source]]\" )\r\n  |> filter(fn: (r) => r._field       == \"STATUS\" )\r\n  |> first()\r\n\r\nfirstStatusTimestamp=\r\n     union(tables: [firstStatusTimestampTemp,dummyRecord])\r\n  |> tableFind(fn: (key) => key._field == \"STATUS\"  )\r\n  |> getColumn(column: \"_time\")\r\n\r\nlastStatusBeforeRangeTemp=\r\nfrom(bucket: \"telemetry\")\r\n  |> range(start:-1000d, \r\n           stop: time(v:uint(v:firstStatusTimestamp[0])-uint(v:1)))\r\n  |> filter(fn: (r) => r._measurement == \"DeviceData\" )\r\n  |> filter(fn: (r) => r.Source       == \"[[Source]]\" )\r\n  |> map(fn: (r) => ({\r\n        _field: \"STATUS\",\r\n        _time: r._time, \r\n        _value: float(v: contains(value: int(v: r._value),\r\n                                  set  : StatusValuesForOn ))\r\n      }))\r\n  |> last()\r\n\r\nlastStatusBeforeRange=\r\n     union(tables: [lastStatusBeforeRangeTemp,dummyRecord])\r\n  |> tableFind(fn: (key) => key._field == \"STATUS\"  )\r\n  |> getColumn(column: \"_value\")         \r\n\r\nreturn lastStatusBeforeRange[length(arr:lastStatusBeforeRange)-1]\r\n}\r\n\r\nDeviceData=from(bucket: \"telemetry\")\r\n  |> range([[range]])\r\n  |> filter(fn: (r) => r._measurement == \"DeviceData\" )\r\n  |> filter(fn: (r) => r.Source       == \"[[Source]]\" )\r\n  |> group()\r\n  |> keep(columns: [\"_time\",\"_field\",\"_value\"])\r\n\r\nItemCountGoodData=\r\n  DeviceData\r\n  |> filter(fn: (r) => r._field == \"ITEM_COUNT_GOOD\" )\r\n  |> aggregateWindow(every: 1m, fn: sum)\r\n  |> sum()\r\n  |> map(fn: (r) => ({\r\n     _value: r._value,\r\n     _time: now()\r\n    }))\r\n\r\nItemCountBadData=\r\n  DeviceData\r\n  |> filter(fn: (r) => r._field == \"ITEM_COUNT_BAD\" )\r\n  |> aggregateWindow(every: 1m, fn: sum)\r\n  |> sum()\r\n  |> map(fn: (r) => ({\r\n     _value: r._value,\r\n     _time: now()\r\n    }))\r\n\r\nStatusData=\r\n  DeviceData\r\n  |> filter(fn: (r) =>  r._field == \"STATUS\")\r\n  |> map(fn: (r) => ({\r\n      _time: r._time, \r\n      _value: float(v: contains(value: int(v: r._value), \r\n                                       set: StatusValuesForOn ))\r\n  }))\r\n\r\nStatusDataWindowed=\r\n  StatusData\r\n  |> aggregateWindow(every: 1m, fn: mean)\r\n  |> fill(column: \"_value\", usePrevious: true) \r\n  |> fill(column: \"_value\", value: fGetLastStatus()) \r\n  |> map(fn: (r) => ({_time: r._time, _value: math.ceil(x: r._value)}))\r\n  \r\nRunningMins=\r\n  StatusDataWindowed\r\n  |> sum()\r\n  |> map(fn: (r) => ({\r\n     _value: r._value,\r\n     _time: now()\r\n    }))\r\n\r\nIdleMins=\r\n  StatusDataWindowed\r\n  |> map(fn: (r) => ({\r\n     _value: 1.0 - r._value,\r\n     _time: r._time,\r\n    }))\r\n  |> sum()\r\n  |> map(fn: (r) => ({\r\n     _value: r._value,\r\n     _time: now()\r\n    }))\r\n\r\nAvailability=\r\n  join(\r\n    tables: {on: RunningMins, off: IdleMins},\r\n    on: [\"_time\"]\r\n  )\r\n  |> map(fn: (r) => ({\r\n     _value: if r._value_on+r._value_off == 0.0 then 0.0 \r\n             else r._value_on/(r._value_on+r._value_off),\r\n     _time: r._time,\r\n     _field: \"Availability\"\r\n    }))\r\n    \r\nQuality=\r\n  join(\r\n    tables: {good: ItemCountGoodData, bad: ItemCountBadData},\r\n    on: [\"_time\"]\r\n  )\r\n  |> map(fn: (r) => ({\r\n     _value: if r._value_good+r._value_bad == 0.0 then 0.0 \r\n             else r._value_good/(r._value_good+r._value_bad),\r\n     _time: r._time,\r\n     _field: \"Quality\"\r\n    }))\r\n\r\nPerformance=\r\n  join(\r\n    tables: {good: ItemCountGoodData, on: RunningMins},\r\n    on: [\"_time\"]\r\n  )\r\n  |> map(fn: (r) => ({\r\n     _value: if r._value_on == 0.0 or float(v:$idealRunrate) == 0.0 then 0.0 \r\n             else (r._value_good/r._value_on)/float(v:$idealRunrate),\r\n     _time: r._time,\r\n     _value_on : r._value_on, _value_good: r._value_good,\r\n     _field: \"Performance\"\r\n    }))\r\n\r\nAxQ=\r\n  join(\r\n    tables: {a:Availability, q: Quality},\r\n    on: [\"_time\"]\r\n  )\r\n  |> map(fn: (r) => ({\r\n     _value: r._value_a * r._value_q,\r\n     _time: r._time,\r\n     _field: \"AxQ\"\r\n    }))\r\n\r\nOEE=\r\n  join(\r\n    tables: {axq:AxQ, p: Performance},\r\n    on: [\"_time\"]\r\n  )\r\n  |> map(fn: (r) => ({\r\n     _value: r._value_axq * r._value_p,\r\n     _time: r._time,\r\n     _field: \"OEE\"\r\n    }))\r\n  |> yield(name: \"OEE\")\r\n",
          "refId": "A"
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "OEE",
      "type": "stat"
    },
    {
      "aliasColors": {
        " Availability": "#00743f",
        " OEE": "semi-dark-blue",
        " Performance": "#c05640",
        " Quality": "#be9063",
        " Running": "light-green"
      },
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": "myinfluxdb",
      "decimals": null,
      "fill": 0,
      "fillGradient": 0,
      "gridPos": {
        "h": 11,
        "w": 12,
        "x": 0,
        "y": 8
      },
      "hiddenSeries": false,
      "id": 28,
      "interval": "1m",
      "legend": {
        "alignAsTable": true,
        "avg": true,
        "current": true,
        "max": true,
        "min": true,
        "rightSide": false,
        "show": true,
        "sort": "min",
        "sortDesc": false,
        "total": false,
        "values": true
      },
      "lines": true,
      "linewidth": 1,
      "nullPointMode": "null",
      "options": {
        "dataLinks": []
      },
      "percentage": false,
      "pointradius": 2,
      "points": false,
      "renderer": "flot",
      "scopedVars": {
        "Source": {
          "selected": true,
          "text": "urn:edgevm3.internal.cloudapp.net:OPC-Site-01",
          "value": "urn:edgevm3.internal.cloudapp.net:OPC-Site-01"
        }
      },
      "seriesOverrides": [
        {
          "alias": " Running",
          "steppedLine": true,
          "yaxis": 1
        },
        {
          "alias": " OEE",
          "color": "#f2a104",
          "linewidth": 3,
          "yaxis": 1
        },
        {
          "alias": " Performance",
          "color": "#ee6c81",
          "yaxis": 1
        },
        {
          "alias": " Availability",
          "color": "#80add7",
          "yaxis": 1
        },
        {
          "alias": " Quality",
          "color": "#A352CC",
          "yaxis": 1
        }
      ],
      "spaceLength": 10,
      "stack": false,
      "steppedLine": false,
      "targets": [
        {
          "query": "import \"math\"\r\nimport \"csv\"\r\n\r\nStatusValuesForOn = [101,105,108]\r\n\r\nfGetLastStatus = () => {\r\ndummyRecordCsv = \"#datatype,string,long,dateTime:RFC3339,dateTime:RFC3339,dateTime:RFC3339,double,string,string,string\\n#group,false,false,true,true,false,false,true,true,true\\n#default,_result,,,,,,,,\\n,result,table,_start,_stop,_time,_value,Source,_field,_measurement\\n,,0,2030-01-01T00:00:00.0Z,2030-01-01T00:00:00.0Z,2030-01-01T00:00:00.0Z,0,,STATUS,DeviceData\"\r\n\r\ndummyRecord=csv.from(csv: dummyRecordCsv )\r\n\r\nfirstStatusTimestampTemp=\r\n  from(bucket: \"telemetry\")\r\n  |> range([[range]])\r\n  |> filter(fn: (r) => r._measurement == \"DeviceData\" )\r\n  |> filter(fn: (r) => r.Source       == \"[[Source]]\" )\r\n  |> filter(fn: (r) => r._field       == \"STATUS\" )\r\n  |> first()\r\n\r\nfirstStatusTimestamp=\r\n     union(tables: [firstStatusTimestampTemp,dummyRecord])\r\n  |> tableFind(fn: (key) => key._field == \"STATUS\"  )\r\n  |> getColumn(column: \"_time\")\r\n\r\nlastStatusBeforeRangeTemp=\r\nfrom(bucket: \"telemetry\")\r\n  |> range(start:-1000d, \r\n           stop: time(v:uint(v:firstStatusTimestamp[0])-uint(v:1)))\r\n  |> filter(fn: (r) => r._measurement == \"DeviceData\" )\r\n  |> filter(fn: (r) => r.Source       == \"[[Source]]\" )\r\n  |> map(fn: (r) => ({\r\n        _field: \"STATUS\",\r\n        _time: r._time, \r\n        _value: float(v: contains(value: int(v: r._value),\r\n                                  set  : StatusValuesForOn ))\r\n      }))\r\n  |> last()\r\n\r\nlastStatusBeforeRange=\r\n     union(tables: [lastStatusBeforeRangeTemp,dummyRecord])\r\n  |> tableFind(fn: (key) => key._field == \"STATUS\"  )\r\n  |> getColumn(column: \"_value\")         \r\n\r\nreturn lastStatusBeforeRange[length(arr:lastStatusBeforeRange)-1]\r\n}\r\n\r\nDeviceData=from(bucket: \"telemetry\")\r\n  |> range([[range]])\r\n  |> filter(fn: (r) => r._measurement == \"DeviceData\" )\r\n  |> filter(fn: (r) => r.Source       == \"[[Source]]\" )\r\n  |> group()\r\n  |> keep(columns: [\"_time\",\"_field\",\"_value\"])\r\n\r\nItemCountGoodData=\r\n  DeviceData\r\n  |> filter(fn: (r) => r._field == \"ITEM_COUNT_GOOD\" )\r\n  |> aggregateWindow(every: 1m, fn: sum)\r\n  |> map(fn: (r) => ({r with _field: \"Good Items\"}))\r\n  |> cumulativeSum()\r\n\r\nItemCountBadData=\r\n  DeviceData\r\n  |> filter(fn: (r) => r._field == \"ITEM_COUNT_BAD\" )\r\n  |> aggregateWindow(every: 1m, fn: sum)\r\n  |> map(fn: (r) => ({r with _field: \"Bad Items\"}))\r\n  |> cumulativeSum()\r\n\r\nStatusData=\r\n  DeviceData\r\n  |> filter(fn: (r) =>  r._field == \"STATUS\")\r\n  |> map(fn: (r) => ({\r\n      _time: r._time, \r\n      _value: float(v: contains(value: int(v: r._value), \r\n                                       set: StatusValuesForOn ))\r\n  }))\r\n\r\nStatusDataWindowed=\r\n  StatusData\r\n  |> aggregateWindow(every: 1m, fn: mean)\r\n  |> fill(column: \"_value\", usePrevious: true) \r\n  |> fill(column: \"_value\", value: fGetLastStatus()) \r\n  |> map(fn: (r) => ({_time: r._time, _value: math.ceil(x: r._value)}))\r\n  \r\nRunningMins=\r\n  StatusDataWindowed\r\n  |> cumulativeSum()\r\n\r\nIdleMins=\r\n  StatusDataWindowed\r\n  |> map(fn: (r) => ({\r\n     _value: 1.0 - r._value,\r\n     _time: r._time,\r\n    }))\r\n  |> cumulativeSum()\r\n\r\nAvailability=\r\n  join(\r\n    tables: {on: RunningMins, off: IdleMins},\r\n    on: [\"_time\"]\r\n  )\r\n  |> map(fn: (r) => ({\r\n     _value: if r._value_on+r._value_off == 0.0 then 0.0 \r\n             else r._value_on/(r._value_on+r._value_off),\r\n     _time: r._time,\r\n     _field: \"Availability\"\r\n    }))\r\n\r\n  \r\nQuality=\r\n  join(\r\n    tables: {good: ItemCountGoodData, bad: ItemCountBadData},\r\n    on: [\"_time\"]\r\n  )\r\n  |> map(fn: (r) => ({\r\n     _value: if r._value_good+r._value_bad == 0.0 then 0.0 \r\n             else r._value_good/(r._value_good+r._value_bad),\r\n     _time: r._time,\r\n     _field: \"Quality\"\r\n    }))\r\n\r\n\r\n\r\nPerformance=\r\n  join(\r\n    tables: {good: ItemCountGoodData, on: RunningMins},\r\n    on: [\"_time\"]\r\n  )\r\n  |> map(fn: (r) => ({\r\n     _value: if r._value_on == 0.0 or float(v:$idealRunrate) == 0.0 then 0.0 \r\n             else (r._value_good/r._value_on)/float(v:$idealRunrate),\r\n     _time: r._time,\r\n     _value_on : r._value_on, _value_good: r._value_good,\r\n     _field: \"Performance\"\r\n    }))\r\n\r\n\r\n\r\n\r\nAxQ=\r\n  join(\r\n    tables: {a:Availability, q: Quality},\r\n    on: [\"_time\"]\r\n  )\r\n  |> map(fn: (r) => ({\r\n     _value: r._value_a * r._value_q,\r\n     _time: r._time,\r\n     _field: \"AxQ\"\r\n    }))\r\n\r\nOEE=\r\n  join(\r\n    tables: {axq:AxQ, p: Performance},\r\n    on: [\"_time\"]\r\n  )\r\n  |> map(fn: (r) => ({\r\n     _value: r._value_axq * r._value_p,\r\n     _time: r._time,\r\n     _field: \"OEE\"\r\n    }))\r\n\r\nOEE\r\n|>yield(name: \"OEE\")\r\n\r\nAvailability\r\n|>yield(name: \"Availability\")\r\n\r\nQuality\r\n|>yield(name: \"Quality\")\r\n\r\nPerformance\r\n|>yield(name: \"Performance\")\r\n\r\n \r\n   \r\n RunStatus=\r\n  StatusDataWindowed\r\n  |> map(fn: (r) => ({\r\n     _value: r._value,\r\n     _time: r._time,\r\n     _field: \"Running\"\r\n    }))\r\n  |> aggregateWindow(every: 1m, fn: max)\r\n  |> yield(name: \"Run Status\") ",
          "refId": "A",
          "resultFormat": "time_series"
        }
      ],
      "thresholds": [
        {
          "colorMode": "custom",
          "fill": false,
          "fillColor": "rgba(50, 116, 217, 0.2)",
          "line": true,
          "lineColor": "rgb(122, 122, 119)",
          "op": "gt",
          "value": 1,
          "yaxis": "left"
        }
      ],
      "timeFrom": null,
      "timeRegions": [
        {
          "colorMode": "custom",
          "fill": false,
          "fillColor": "rgb(54, 50, 47)",
          "from": "00:00",
          "line": true,
          "lineColor": "#6a8a82",
          "op": "time",
          "to": "08:00"
        },
        {
          "colorMode": "custom",
          "fill": false,
          "fillColor": "rgb(51, 45, 36)",
          "from": "08:00",
          "line": true,
          "lineColor": "#6a8a82",
          "op": "time",
          "to": "16:00"
        },
        {
          "colorMode": "custom",
          "fill": false,
          "fillColor": "rgb(66, 60, 47)",
          "from": "16:00",
          "line": true,
          "lineColor": "#6a8a82",
          "op": "time",
          "to": "00:00"
        }
      ],
      "timeShift": null,
      "title": "KPIs",
      "tooltip": {
        "shared": true,
        "sort": 0,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "buckets": null,
        "mode": "time",
        "name": null,
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "decimals": 0,
          "format": "percentunit",
          "label": "%",
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        },
        {
          "decimals": null,
          "format": "short",
          "label": "# Items/min",
          "logBase": 1,
          "max": null,
          "min": null,
          "show": false
        }
      ],
      "yaxis": {
        "align": false,
        "alignLevel": null
      }
    },
    {
      "aliasColors": {
        " Availability": "#00743f",
        " OEE": "semi-dark-blue",
        " Performance": "#c05640",
        " Quality": "#be9063",
        " Running": "light-green"
      },
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": "myinfluxdb",
      "decimals": null,
      "fill": 0,
      "fillGradient": 0,
      "gridPos": {
        "h": 11,
        "w": 12,
        "x": 12,
        "y": 8
      },
      "hiddenSeries": false,
      "id": 27,
      "interval": "1m",
      "legend": {
        "alignAsTable": true,
        "avg": true,
        "current": true,
        "max": true,
        "min": true,
        "rightSide": false,
        "show": true,
        "sort": "min",
        "sortDesc": false,
        "total": false,
        "values": true
      },
      "lines": true,
      "linewidth": 1,
      "nullPointMode": "null",
      "options": {
        "dataLinks": []
      },
      "percentage": false,
      "pointradius": 2,
      "points": false,
      "renderer": "flot",
      "scopedVars": {
        "Source": {
          "selected": true,
          "text": "urn:edgevm3.internal.cloudapp.net:OPC-Site-01",
          "value": "urn:edgevm3.internal.cloudapp.net:OPC-Site-01"
        }
      },
      "seriesOverrides": [
        {
          "alias": " Bad Items",
          "color": "#a1414a",
          "yaxis": 2
        },
        {
          "alias": " Good Items",
          "color": "#00743f",
          "yaxis": 2
        },
        {
          "alias": " IdealRunrate",
          "color": "#be9063",
          "yaxis": 2
        },
        {
          "alias": " Running",
          "steppedLine": true,
          "yaxis": 1
        },
        {
          "alias": " OEE",
          "color": "#f2a104",
          "linewidth": 3,
          "yaxis": 1
        },
        {
          "alias": " Performance",
          "color": "#ee6c81",
          "yaxis": 1
        },
        {
          "alias": " Availability",
          "color": "#80add7",
          "yaxis": 1
        },
        {
          "alias": " Quality",
          "color": "#A352CC",
          "yaxis": 1
        }
      ],
      "spaceLength": 10,
      "stack": false,
      "steppedLine": false,
      "targets": [
        {
          "query": "\n\r\nDeviceData=from(bucket: \"telemetry\")\r\n  |> range([[range]])\r\n  |> filter(fn: (r) => r._measurement == \"DeviceData\" )\r\n  |> filter(fn: (r) => r.Source       == \"[[Source]]\" )\r\n  |> group()\r\n  |> keep(columns: [\"_time\",\"_field\",\"_value\"])\r\n\r\nItemCountGoodData=\r\n  DeviceData\r\n  |> filter(fn: (r) => r._field == \"ITEM_COUNT_GOOD\" )\r\n  |> aggregateWindow(every: 1m, fn: sum)\r\n  |> map(fn: (r) => ({r with _field: \"Good Items\"}))\r\n  |> yield(name: \"Good Items\")\r\n  |> cumulativeSum()\r\n\r\nItemCountBadData=\r\n  DeviceData\r\n  |> filter(fn: (r) => r._field == \"ITEM_COUNT_BAD\" )\r\n  |> aggregateWindow(every: 1m, fn: sum)\r\n  |> map(fn: (r) => ({r with _field: \"Bad Items\"}))\r\n  |> yield(name: \"Bad Items\")\r\n  |> cumulativeSum()\r\n\r\n  \r\nQuality=\r\n  join(\r\n    tables: {good: ItemCountGoodData, bad: ItemCountBadData},\r\n    on: [\"_time\"]\r\n  )\r\n  |> map(fn: (r) => ({\r\n     _value: if r._value_good+r._value_bad == 0.0 then 0.0 \r\n             else r._value_good/(r._value_good+r._value_bad),\r\n     _time: r._time,\r\n     _field: \"Quality\"\r\n    }))\r\n\r\n\r\n\r\nQuality\r\n|>yield(name: \"Quality\")\r\n\n\r\nIdealRunrate=\r\n  DeviceData\r\n  |> filter(fn: (r) =>\r\n    r._field == \"STATUS\"\r\n  )\r\n  |> aggregateWindow(every: 1m, fn: sum)\r\n  |> map(fn: (r) => ({\r\n     _value: float(v:$idealRunrate),\r\n     _time: r._time,\r\n     _field: \"IdealRunrate\"\r\n    }))\r\n  |> yield(name: \"IdealRunrate\")\r\n \r\n  ",
          "refId": "A",
          "resultFormat": "time_series"
        }
      ],
      "thresholds": [
        {
          "colorMode": "custom",
          "fill": false,
          "fillColor": "rgba(50, 116, 217, 0.2)",
          "line": true,
          "lineColor": "rgb(122, 122, 119)",
          "op": "gt",
          "value": 1,
          "yaxis": "left"
        }
      ],
      "timeFrom": null,
      "timeRegions": [
        {
          "colorMode": "custom",
          "fill": false,
          "fillColor": "rgb(54, 50, 47)",
          "from": "00:00",
          "line": true,
          "lineColor": "#6a8a82",
          "op": "time",
          "to": "08:00"
        },
        {
          "colorMode": "custom",
          "fill": false,
          "fillColor": "rgb(51, 45, 36)",
          "from": "08:00",
          "line": true,
          "lineColor": "#6a8a82",
          "op": "time",
          "to": "16:00"
        },
        {
          "colorMode": "custom",
          "fill": false,
          "fillColor": "rgb(66, 60, 47)",
          "from": "16:00",
          "line": true,
          "lineColor": "#6a8a82",
          "op": "time",
          "to": "00:00"
        }
      ],
      "timeShift": null,
      "title": "Throughput vs Quality",
      "tooltip": {
        "shared": true,
        "sort": 0,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "buckets": null,
        "mode": "time",
        "name": null,
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "decimals": 0,
          "format": "percentunit",
          "label": "%",
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        },
        {
          "decimals": null,
          "format": "short",
          "label": "# Items/min",
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        }
      ],
      "yaxis": {
        "align": false,
        "alignLevel": null
      }
    },
    {
      "collapsed": false,
      "datasource": "",
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 19
      },
      "id": 40,
      "panels": [],
      "repeat": null,
      "repeatIteration": 1591995668192,
      "repeatPanelId": 39,
      "scopedVars": {
        "Source": {
          "selected": true,
          "text": "urn:edgevm3.internal.cloudapp.net:OPC-Site-02",
          "value": "urn:edgevm3.internal.cloudapp.net:OPC-Site-02"
        }
      },
      "title": "[[Source]]",
      "type": "row"
    },
    {
      "datasource": "myinfluxdb",
      "gridPos": {
        "h": 7,
        "w": 4,
        "x": 0,
        "y": 20
      },
      "id": 41,
      "options": {
        "colorMode": "value",
        "fieldOptions": {
          "calcs": [
            "mean"
          ],
          "defaults": {
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "#a1414a",
                  "value": null
                },
                {
                  "color": "#f2a104",
                  "value": 0.85
                },
                {
                  "color": "#00743f",
                  "value": 0.9
                }
              ]
            },
            "title": "",
            "unit": "percentunit"
          },
          "overrides": [],
          "values": false
        },
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto"
      },
      "pluginVersion": "6.7.1",
      "repeat": null,
      "repeatDirection": "v",
      "repeatIteration": 1591995668192,
      "repeatPanelId": 17,
      "repeatedByRow": true,
      "scopedVars": {
        "Source": {
          "selected": true,
          "text": "urn:edgevm3.internal.cloudapp.net:OPC-Site-02",
          "value": "urn:edgevm3.internal.cloudapp.net:OPC-Site-02"
        }
      },
      "targets": [
        {
          "query": "import \"math\"\r\nimport \"csv\"\r\n\r\nStatusValuesForOn = [101,105,108]\r\n\r\nfGetLastStatus = () => {\r\ndummyRecordCsv = \"#datatype,string,long,dateTime:RFC3339,dateTime:RFC3339,dateTime:RFC3339,double,string,string,string\\n#group,false,false,true,true,false,false,true,true,true\\n#default,_result,,,,,,,,\\n,result,table,_start,_stop,_time,_value,Source,_field,_measurement\\n,,0,2030-01-01T00:00:00.0Z,2030-01-01T00:00:00.0Z,2030-01-01T00:00:00.0Z,0,,STATUS,DeviceData\"\r\n\r\ndummyRecord=csv.from(csv: dummyRecordCsv )\r\n\r\nfirstStatusTimestampTemp=\r\n  from(bucket: \"telemetry\")\r\n  |> range([[range]])\r\n  |> filter(fn: (r) => r._measurement == \"DeviceData\" )\r\n  |> filter(fn: (r) => r.Source       == \"[[Source]]\" )\r\n  |> filter(fn: (r) => r._field       == \"STATUS\" )\r\n  |> first()\r\n\r\nfirstStatusTimestamp=\r\n     union(tables: [firstStatusTimestampTemp,dummyRecord])\r\n  |> tableFind(fn: (key) => key._field == \"STATUS\"  )\r\n  |> getColumn(column: \"_time\")\r\n\r\nlastStatusBeforeRangeTemp=\r\nfrom(bucket: \"telemetry\")\r\n  |> range(start:-1000d, \r\n           stop: time(v:uint(v:firstStatusTimestamp[0])-uint(v:1)))\r\n  |> filter(fn: (r) => r._measurement == \"DeviceData\" )\r\n  |> filter(fn: (r) => r.Source       == \"[[Source]]\" )\r\n  |> map(fn: (r) => ({\r\n        _field: \"STATUS\",\r\n        _time: r._time, \r\n        _value: float(v: contains(value: int(v: r._value),\r\n                                  set  : StatusValuesForOn ))\r\n      }))\r\n  |> last()\r\n\r\nlastStatusBeforeRange=\r\n     union(tables: [lastStatusBeforeRangeTemp,dummyRecord])\r\n  |> tableFind(fn: (key) => key._field == \"STATUS\"  )\r\n  |> getColumn(column: \"_value\")         \r\n\r\nreturn lastStatusBeforeRange[length(arr:lastStatusBeforeRange)-1]\r\n}\r\n\r\nDeviceData=from(bucket: \"telemetry\")\r\n  |> range([[range]])\r\n  |> filter(fn: (r) => r._measurement == \"DeviceData\" )\r\n  |> filter(fn: (r) => r.Source       == \"[[Source]]\" )\r\n\r\n \r\nStatusData=\r\n  DeviceData\r\n  |> filter(fn: (r) =>  r._field == \"STATUS\")\r\n  |> map(fn: (r) => ({\r\n      _time: r._time, \r\n      _value: float(v: contains(value: int(v: r._value), \r\n                                       set: StatusValuesForOn ))\r\n  }))\r\n\r\n\r\nStatusDataWindowed=\r\n  StatusData\r\n  |> aggregateWindow(every: 1m, fn: mean)\r\n  |> fill(column: \"_value\", usePrevious: true) \r\n  |> fill(column: \"_value\", value: fGetLastStatus()) \r\n  |> map(fn: (r) => ({_time: r._time, _value: math.ceil(x: r._value)}))\r\n  \r\nRunningMins=\r\n  StatusDataWindowed\r\n  |> sum()\r\n  |> map(fn: (r) => ({\r\n     _value: r._value,\r\n     _time: now()\r\n    }))\r\n\r\n  \r\nIdleMins=\r\n  StatusDataWindowed\r\n  |> map(fn: (r) => ({\r\n     _value: 1.0 - r._value,\r\n     _time: r._time,\r\n    }))\r\n  |> sum()\r\n  |> map(fn: (r) => ({\r\n     _value: r._value,\r\n     _time: now()\r\n    }))\r\n\r\n\r\nAvailability=\r\n  join(\r\n    tables: {on: RunningMins, off: IdleMins},\r\n    on: [\"_time\"]\r\n  )\r\n  |> map(fn: (r) => ({\r\n     _value: if r._value_on+r._value_off == 0.0 then 0.0 \r\n             else r._value_on/(r._value_on+r._value_off),\r\n     _time: r._time,\r\n     _field: \"Availability\"\r\n    }))\r\n  |> yield(name: \"Availability\")\r\n",
          "refId": "A"
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "Availability",
      "type": "stat"
    },
    {
      "content": "<div align=center>\r\n\r\n<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0\r\n style='border:none;'>\r\n <tr style=''>\r\n  <td width=623 style='height:190.0pt'>\r\n  <p align=center style='text-align:center'><b><span style='font-size:60.0pt;color:grey'>X</span></b></p>\r\n  </td>\r\n </tr>\r\n</table>\r\n\r\n</div>",
      "datasource": "InfluxDB",
      "description": "",
      "gridPos": {
        "h": 7,
        "w": 2,
        "x": 4,
        "y": 20
      },
      "id": 42,
      "mode": "html",
      "repeat": null,
      "repeatDirection": "v",
      "repeatIteration": 1591995668192,
      "repeatPanelId": 22,
      "repeatedByRow": true,
      "scopedVars": {
        "Source": {
          "selected": true,
          "text": "urn:edgevm3.internal.cloudapp.net:OPC-Site-02",
          "value": "urn:edgevm3.internal.cloudapp.net:OPC-Site-02"
        }
      },
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "text"
    },
    {
      "datasource": "myinfluxdb",
      "gridPos": {
        "h": 7,
        "w": 4,
        "x": 6,
        "y": 20
      },
      "id": 43,
      "options": {
        "colorMode": "value",
        "fieldOptions": {
          "calcs": [
            "mean"
          ],
          "defaults": {
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "#a1414a",
                  "value": null
                },
                {
                  "color": "#f2a104",
                  "value": 0.9
                },
                {
                  "color": "#00743f",
                  "value": 0.95
                }
              ]
            },
            "title": "",
            "unit": "percentunit"
          },
          "overrides": [],
          "values": false
        },
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto"
      },
      "pluginVersion": "6.7.1",
      "repeat": null,
      "repeatDirection": "v",
      "repeatIteration": 1591995668192,
      "repeatPanelId": 14,
      "repeatedByRow": true,
      "scopedVars": {
        "Source": {
          "selected": true,
          "text": "urn:edgevm3.internal.cloudapp.net:OPC-Site-02",
          "value": "urn:edgevm3.internal.cloudapp.net:OPC-Site-02"
        }
      },
      "targets": [
        {
          "query": "DeviceData=from(bucket: \"telemetry\")\r\n  |> range([[range]])\r\n  |> filter(fn: (r) => r._measurement == \"DeviceData\" )\r\n  |> filter(fn: (r) => r.Source       == \"[[Source]]\" )\r\n  |> keep(columns: [\"_time\",\"_field\",\"_value\"])\r\n \r\nItemCountGoodData=\r\n  DeviceData\r\n  |> filter(fn: (r) => r._field == \"ITEM_COUNT_GOOD\" )\r\n  |> aggregateWindow(every: 1m, fn: sum)\r\n  |> sum()\r\n  |> map(fn: (r) => ({\r\n     _value: r._value,\r\n     _time: now()\r\n    }))\r\n\r\nItemCountBadData=\r\n  DeviceData\r\n  |> filter(fn: (r) => r._field == \"ITEM_COUNT_BAD\" )\r\n  |> aggregateWindow(every: 1m, fn: sum)\r\n  |> sum()\r\n  |> map(fn: (r) => ({\r\n     _value: r._value,\r\n     _time: now()\r\n    }))\r\n\r\nQuality=\r\n  join(\r\n    tables: {good: ItemCountGoodData, bad: ItemCountBadData},\r\n    on: [\"_time\"]\r\n  )\r\n  |> map(fn: (r) => ({\r\n     _value: if r._value_good+r._value_bad == 0.0 then 0.0 \r\n             else r._value_good/(r._value_good+r._value_bad),\r\n     _time: r._time,\r\n     _field: \"Quality\"\r\n    }))\r\n  |> yield(name: \"Quality\")\r\n",
          "refId": "A"
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "Quality",
      "type": "stat"
    },
    {
      "content": "<div align=center>\r\n\r\n<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0\r\n style='border:none;'>\r\n <tr style=''>\r\n  <td width=623 style='height:190.0pt'>\r\n  <p align=center style='text-align:center'><b><span style='font-size:60.0pt;color:grey'>X</span></b></p>\r\n  </td>\r\n </tr>\r\n</table>\r\n\r\n</div>",
      "datasource": "InfluxDB",
      "description": "",
      "gridPos": {
        "h": 7,
        "w": 2,
        "x": 10,
        "y": 20
      },
      "id": 44,
      "mode": "html",
      "repeat": null,
      "repeatDirection": "v",
      "repeatIteration": 1591995668192,
      "repeatPanelId": 25,
      "repeatedByRow": true,
      "scopedVars": {
        "Source": {
          "selected": true,
          "text": "urn:edgevm3.internal.cloudapp.net:OPC-Site-02",
          "value": "urn:edgevm3.internal.cloudapp.net:OPC-Site-02"
        }
      },
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "text"
    },
    {
      "datasource": "myinfluxdb",
      "gridPos": {
        "h": 7,
        "w": 4,
        "x": 12,
        "y": 20
      },
      "id": 45,
      "options": {
        "colorMode": "value",
        "fieldOptions": {
          "calcs": [
            "mean"
          ],
          "defaults": {
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "#a1414a",
                  "value": null
                },
                {
                  "color": "#f2a104",
                  "value": 0.9
                },
                {
                  "color": "#00743f",
                  "value": 0.95
                }
              ]
            },
            "title": "",
            "unit": "percentunit"
          },
          "overrides": [],
          "values": false
        },
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto"
      },
      "pluginVersion": "6.7.1",
      "repeat": null,
      "repeatDirection": "v",
      "repeatIteration": 1591995668192,
      "repeatPanelId": 18,
      "repeatedByRow": true,
      "scopedVars": {
        "Source": {
          "selected": true,
          "text": "urn:edgevm3.internal.cloudapp.net:OPC-Site-02",
          "value": "urn:edgevm3.internal.cloudapp.net:OPC-Site-02"
        }
      },
      "targets": [
        {
          "query": "import \"math\"\r\nimport \"csv\"\r\n\r\nStatusValuesForOn = [101,105,108]\r\n\r\nfGetLastStatus = () => {\r\ndummyRecordCsv = \"#datatype,string,long,dateTime:RFC3339,dateTime:RFC3339,dateTime:RFC3339,double,string,string,string\\n#group,false,false,true,true,false,false,true,true,true\\n#default,_result,,,,,,,,\\n,result,table,_start,_stop,_time,_value,Source,_field,_measurement\\n,,0,2030-01-01T00:00:00.0Z,2030-01-01T00:00:00.0Z,2030-01-01T00:00:00.0Z,0,,STATUS,DeviceData\"\r\n\r\ndummyRecord=csv.from(csv: dummyRecordCsv )\r\n\r\nfirstStatusTimestampTemp=\r\n  from(bucket: \"telemetry\")\r\n  |> range([[range]])\r\n  |> filter(fn: (r) => r._measurement == \"DeviceData\" )\r\n  |> filter(fn: (r) => r.Source       == \"[[Source]]\" )\r\n  |> filter(fn: (r) => r._field       == \"STATUS\" )\r\n  |> first()\r\n\r\nfirstStatusTimestamp=\r\n     union(tables: [firstStatusTimestampTemp,dummyRecord])\r\n  |> tableFind(fn: (key) => key._field == \"STATUS\"  )\r\n  |> getColumn(column: \"_time\")\r\n\r\nlastStatusBeforeRangeTemp=\r\nfrom(bucket: \"telemetry\")\r\n  |> range(start:-1000d, \r\n           stop: time(v:uint(v:firstStatusTimestamp[0])-uint(v:1)))\r\n  |> filter(fn: (r) => r._measurement == \"DeviceData\" )\r\n  |> filter(fn: (r) => r.Source       == \"[[Source]]\" )\r\n  |> map(fn: (r) => ({\r\n        _field: \"STATUS\",\r\n        _time: r._time, \r\n        _value: float(v: contains(value: int(v: r._value),\r\n                                  set  : StatusValuesForOn ))\r\n      }))\r\n  |> last()\r\n\r\nlastStatusBeforeRange=\r\n     union(tables: [lastStatusBeforeRangeTemp,dummyRecord])\r\n  |> tableFind(fn: (key) => key._field == \"STATUS\"  )\r\n  |> getColumn(column: \"_value\")         \r\n\r\nreturn lastStatusBeforeRange[length(arr:lastStatusBeforeRange)-1]\r\n}\r\n\r\nDeviceData=from(bucket: \"telemetry\")\r\n  |> range([[range]])\r\n  |> filter(fn: (r) => r._measurement == \"DeviceData\" )\r\n  |> filter(fn: (r) => r.Source       == \"[[Source]]\" )\r\n  |> group()\r\n  |> keep(columns: [\"_time\",\"_field\",\"_value\"])\r\n\r\nItemCountGoodData=\r\n  DeviceData\r\n  |> filter(fn: (r) => r._field == \"ITEM_COUNT_GOOD\" )\r\n  |> aggregateWindow(every: 1m, fn: sum)\r\n  |> sum()\r\n  |> map(fn: (r) => ({\r\n     _value: r._value,\r\n     _time: now()\r\n    }))\r\n\r\nStatusData=\r\n  DeviceData\r\n  |> filter(fn: (r) =>  r._field == \"STATUS\")\r\n  |> map(fn: (r) => ({\r\n      _time: r._time, \r\n      _value: float(v: contains(value: int(v: r._value), \r\n                                       set: StatusValuesForOn ))\r\n  }))\r\n\r\nStatusDataWindowed=\r\n  StatusData\r\n  |> aggregateWindow(every: 1m, fn: mean)\r\n  |> fill(column: \"_value\", usePrevious: true) \r\n  |> fill(column: \"_value\", value: fGetLastStatus()) \r\n  |> map(fn: (r) => ({_time: r._time, _value: math.ceil(x: r._value)}))\r\n  \r\nRunningMins=\r\n  StatusDataWindowed\r\n  |> sum()\r\n  |> map(fn: (r) => ({\r\n     _value: r._value,\r\n     _time: now()\r\n    }))\r\n\r\nPerformance=\r\n  join(\r\n    tables: {good: ItemCountGoodData, on: RunningMins},\r\n    on: [\"_time\"]\r\n  )\r\n  |> map(fn: (r) => ({\r\n     _value: if r._value_on == 0.0 or float(v:$idealRunrate) == 0.0 then 0.0 \r\n             else (r._value_good/r._value_on)/float(v:$idealRunrate),\r\n     _time: r._time,\r\n     _value_on : r._value_on, _value_good: r._value_good,\r\n     _field: \"Performance\"\r\n    }))\r\n  |> yield(name: \"Performance\")\r\n",
          "refId": "A"
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "Performance",
      "type": "stat"
    },
    {
      "content": "<div align=center>\r\n\r\n<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0\r\n style='border:none;'>\r\n <tr style=''>\r\n  <td width=623 style='height:190.0pt'>\r\n  <p align=center style='text-align:center'><b><span style='font-size:60.0pt;color:grey'>=</span></b></p>\r\n  </td>\r\n </tr>\r\n</table>\r\n\r\n</div>",
      "datasource": "InfluxDB",
      "description": "",
      "gridPos": {
        "h": 7,
        "w": 2,
        "x": 16,
        "y": 20
      },
      "id": 46,
      "mode": "html",
      "repeat": null,
      "repeatDirection": "v",
      "repeatIteration": 1591995668192,
      "repeatPanelId": 26,
      "repeatedByRow": true,
      "scopedVars": {
        "Source": {
          "selected": true,
          "text": "urn:edgevm3.internal.cloudapp.net:OPC-Site-02",
          "value": "urn:edgevm3.internal.cloudapp.net:OPC-Site-02"
        }
      },
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "text"
    },
    {
      "cacheTimeout": null,
      "datasource": "myinfluxdb",
      "gridPos": {
        "h": 7,
        "w": 6,
        "x": 18,
        "y": 20
      },
      "id": 47,
      "links": [],
      "options": {
        "colorMode": "value",
        "fieldOptions": {
          "calcs": [
            "mean"
          ],
          "defaults": {
            "mappings": [
              {
                "id": 0,
                "op": "=",
                "text": "N/A",
                "type": 1,
                "value": "null"
              }
            ],
            "nullValueMode": "connected",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "#a1414a",
                  "value": null
                },
                {
                  "color": "#f2a104",
                  "value": 0.85
                },
                {
                  "color": "#00743f",
                  "value": 0.9
                }
              ]
            },
            "title": "",
            "unit": "percentunit"
          },
          "limit": 1,
          "overrides": [],
          "values": false
        },
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto"
      },
      "pluginVersion": "6.7.1",
      "repeat": null,
      "repeatDirection": "v",
      "repeatIteration": 1591995668192,
      "repeatPanelId": 19,
      "repeatedByRow": true,
      "scopedVars": {
        "Source": {
          "selected": true,
          "text": "urn:edgevm3.internal.cloudapp.net:OPC-Site-02",
          "value": "urn:edgevm3.internal.cloudapp.net:OPC-Site-02"
        }
      },
      "targets": [
        {
          "query": "import \"math\"\r\nimport \"csv\"\r\n\r\nStatusValuesForOn = [101,105,108]\r\n\r\nfGetLastStatus = () => {\r\ndummyRecordCsv = \"#datatype,string,long,dateTime:RFC3339,dateTime:RFC3339,dateTime:RFC3339,double,string,string,string\\n#group,false,false,true,true,false,false,true,true,true\\n#default,_result,,,,,,,,\\n,result,table,_start,_stop,_time,_value,Source,_field,_measurement\\n,,0,2030-01-01T00:00:00.0Z,2030-01-01T00:00:00.0Z,2030-01-01T00:00:00.0Z,0,,STATUS,DeviceData\"\r\n\r\ndummyRecord=csv.from(csv: dummyRecordCsv )\r\n\r\nfirstStatusTimestampTemp=\r\n  from(bucket: \"telemetry\")\r\n  |> range([[range]])\r\n  |> filter(fn: (r) => r._measurement == \"DeviceData\" )\r\n  |> filter(fn: (r) => r.Source       == \"[[Source]]\" )\r\n  |> filter(fn: (r) => r._field       == \"STATUS\" )\r\n  |> first()\r\n\r\nfirstStatusTimestamp=\r\n     union(tables: [firstStatusTimestampTemp,dummyRecord])\r\n  |> tableFind(fn: (key) => key._field == \"STATUS\"  )\r\n  |> getColumn(column: \"_time\")\r\n\r\nlastStatusBeforeRangeTemp=\r\nfrom(bucket: \"telemetry\")\r\n  |> range(start:-1000d, \r\n           stop: time(v:uint(v:firstStatusTimestamp[0])-uint(v:1)))\r\n  |> filter(fn: (r) => r._measurement == \"DeviceData\" )\r\n  |> filter(fn: (r) => r.Source       == \"[[Source]]\" )\r\n  |> map(fn: (r) => ({\r\n        _field: \"STATUS\",\r\n        _time: r._time, \r\n        _value: float(v: contains(value: int(v: r._value),\r\n                                  set  : StatusValuesForOn ))\r\n      }))\r\n  |> last()\r\n\r\nlastStatusBeforeRange=\r\n     union(tables: [lastStatusBeforeRangeTemp,dummyRecord])\r\n  |> tableFind(fn: (key) => key._field == \"STATUS\"  )\r\n  |> getColumn(column: \"_value\")         \r\n\r\nreturn lastStatusBeforeRange[length(arr:lastStatusBeforeRange)-1]\r\n}\r\n\r\nDeviceData=from(bucket: \"telemetry\")\r\n  |> range([[range]])\r\n  |> filter(fn: (r) => r._measurement == \"DeviceData\" )\r\n  |> filter(fn: (r) => r.Source       == \"[[Source]]\" )\r\n  |> group()\r\n  |> keep(columns: [\"_time\",\"_field\",\"_value\"])\r\n\r\nItemCountGoodData=\r\n  DeviceData\r\n  |> filter(fn: (r) => r._field == \"ITEM_COUNT_GOOD\" )\r\n  |> aggregateWindow(every: 1m, fn: sum)\r\n  |> sum()\r\n  |> map(fn: (r) => ({\r\n     _value: r._value,\r\n     _time: now()\r\n    }))\r\n\r\nItemCountBadData=\r\n  DeviceData\r\n  |> filter(fn: (r) => r._field == \"ITEM_COUNT_BAD\" )\r\n  |> aggregateWindow(every: 1m, fn: sum)\r\n  |> sum()\r\n  |> map(fn: (r) => ({\r\n     _value: r._value,\r\n     _time: now()\r\n    }))\r\n\r\nStatusData=\r\n  DeviceData\r\n  |> filter(fn: (r) =>  r._field == \"STATUS\")\r\n  |> map(fn: (r) => ({\r\n      _time: r._time, \r\n      _value: float(v: contains(value: int(v: r._value), \r\n                                       set: StatusValuesForOn ))\r\n  }))\r\n\r\nStatusDataWindowed=\r\n  StatusData\r\n  |> aggregateWindow(every: 1m, fn: mean)\r\n  |> fill(column: \"_value\", usePrevious: true) \r\n  |> fill(column: \"_value\", value: fGetLastStatus()) \r\n  |> map(fn: (r) => ({_time: r._time, _value: math.ceil(x: r._value)}))\r\n  \r\nRunningMins=\r\n  StatusDataWindowed\r\n  |> sum()\r\n  |> map(fn: (r) => ({\r\n     _value: r._value,\r\n     _time: now()\r\n    }))\r\n\r\nIdleMins=\r\n  StatusDataWindowed\r\n  |> map(fn: (r) => ({\r\n     _value: 1.0 - r._value,\r\n     _time: r._time,\r\n    }))\r\n  |> sum()\r\n  |> map(fn: (r) => ({\r\n     _value: r._value,\r\n     _time: now()\r\n    }))\r\n\r\nAvailability=\r\n  join(\r\n    tables: {on: RunningMins, off: IdleMins},\r\n    on: [\"_time\"]\r\n  )\r\n  |> map(fn: (r) => ({\r\n     _value: if r._value_on+r._value_off == 0.0 then 0.0 \r\n             else r._value_on/(r._value_on+r._value_off),\r\n     _time: r._time,\r\n     _field: \"Availability\"\r\n    }))\r\n    \r\nQuality=\r\n  join(\r\n    tables: {good: ItemCountGoodData, bad: ItemCountBadData},\r\n    on: [\"_time\"]\r\n  )\r\n  |> map(fn: (r) => ({\r\n     _value: if r._value_good+r._value_bad == 0.0 then 0.0 \r\n             else r._value_good/(r._value_good+r._value_bad),\r\n     _time: r._time,\r\n     _field: \"Quality\"\r\n    }))\r\n\r\nPerformance=\r\n  join(\r\n    tables: {good: ItemCountGoodData, on: RunningMins},\r\n    on: [\"_time\"]\r\n  )\r\n  |> map(fn: (r) => ({\r\n     _value: if r._value_on == 0.0 or float(v:$idealRunrate) == 0.0 then 0.0 \r\n             else (r._value_good/r._value_on)/float(v:$idealRunrate),\r\n     _time: r._time,\r\n     _value_on : r._value_on, _value_good: r._value_good,\r\n     _field: \"Performance\"\r\n    }))\r\n\r\nAxQ=\r\n  join(\r\n    tables: {a:Availability, q: Quality},\r\n    on: [\"_time\"]\r\n  )\r\n  |> map(fn: (r) => ({\r\n     _value: r._value_a * r._value_q,\r\n     _time: r._time,\r\n     _field: \"AxQ\"\r\n    }))\r\n\r\nOEE=\r\n  join(\r\n    tables: {axq:AxQ, p: Performance},\r\n    on: [\"_time\"]\r\n  )\r\n  |> map(fn: (r) => ({\r\n     _value: r._value_axq * r._value_p,\r\n     _time: r._time,\r\n     _field: \"OEE\"\r\n    }))\r\n  |> yield(name: \"OEE\")\r\n",
          "refId": "A"
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "OEE",
      "type": "stat"
    },
    {
      "aliasColors": {
        " Availability": "#00743f",
        " OEE": "semi-dark-blue",
        " Performance": "#c05640",
        " Quality": "#be9063",
        " Running": "light-green"
      },
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": "myinfluxdb",
      "decimals": null,
      "fill": 0,
      "fillGradient": 0,
      "gridPos": {
        "h": 11,
        "w": 12,
        "x": 0,
        "y": 27
      },
      "hiddenSeries": false,
      "id": 48,
      "interval": "1m",
      "legend": {
        "alignAsTable": true,
        "avg": true,
        "current": true,
        "max": true,
        "min": true,
        "rightSide": false,
        "show": true,
        "sort": "min",
        "sortDesc": false,
        "total": false,
        "values": true
      },
      "lines": true,
      "linewidth": 1,
      "nullPointMode": "null",
      "options": {
        "dataLinks": []
      },
      "percentage": false,
      "pointradius": 2,
      "points": false,
      "renderer": "flot",
      "repeatIteration": 1591995668192,
      "repeatPanelId": 28,
      "repeatedByRow": true,
      "scopedVars": {
        "Source": {
          "selected": true,
          "text": "urn:edgevm3.internal.cloudapp.net:OPC-Site-02",
          "value": "urn:edgevm3.internal.cloudapp.net:OPC-Site-02"
        }
      },
      "seriesOverrides": [
        {
          "alias": " Running",
          "steppedLine": true,
          "yaxis": 1
        },
        {
          "alias": " OEE",
          "color": "#f2a104",
          "linewidth": 3,
          "yaxis": 1
        },
        {
          "alias": " Performance",
          "color": "#ee6c81",
          "yaxis": 1
        },
        {
          "alias": " Availability",
          "color": "#80add7",
          "yaxis": 1
        },
        {
          "alias": " Quality",
          "color": "#A352CC",
          "yaxis": 1
        }
      ],
      "spaceLength": 10,
      "stack": false,
      "steppedLine": false,
      "targets": [
        {
          "query": "import \"math\"\r\nimport \"csv\"\r\n\r\nStatusValuesForOn = [101,105,108]\r\n\r\nfGetLastStatus = () => {\r\ndummyRecordCsv = \"#datatype,string,long,dateTime:RFC3339,dateTime:RFC3339,dateTime:RFC3339,double,string,string,string\\n#group,false,false,true,true,false,false,true,true,true\\n#default,_result,,,,,,,,\\n,result,table,_start,_stop,_time,_value,Source,_field,_measurement\\n,,0,2030-01-01T00:00:00.0Z,2030-01-01T00:00:00.0Z,2030-01-01T00:00:00.0Z,0,,STATUS,DeviceData\"\r\n\r\ndummyRecord=csv.from(csv: dummyRecordCsv )\r\n\r\nfirstStatusTimestampTemp=\r\n  from(bucket: \"telemetry\")\r\n  |> range([[range]])\r\n  |> filter(fn: (r) => r._measurement == \"DeviceData\" )\r\n  |> filter(fn: (r) => r.Source       == \"[[Source]]\" )\r\n  |> filter(fn: (r) => r._field       == \"STATUS\" )\r\n  |> first()\r\n\r\nfirstStatusTimestamp=\r\n     union(tables: [firstStatusTimestampTemp,dummyRecord])\r\n  |> tableFind(fn: (key) => key._field == \"STATUS\"  )\r\n  |> getColumn(column: \"_time\")\r\n\r\nlastStatusBeforeRangeTemp=\r\nfrom(bucket: \"telemetry\")\r\n  |> range(start:-1000d, \r\n           stop: time(v:uint(v:firstStatusTimestamp[0])-uint(v:1)))\r\n  |> filter(fn: (r) => r._measurement == \"DeviceData\" )\r\n  |> filter(fn: (r) => r.Source       == \"[[Source]]\" )\r\n  |> map(fn: (r) => ({\r\n        _field: \"STATUS\",\r\n        _time: r._time, \r\n        _value: float(v: contains(value: int(v: r._value),\r\n                                  set  : StatusValuesForOn ))\r\n      }))\r\n  |> last()\r\n\r\nlastStatusBeforeRange=\r\n     union(tables: [lastStatusBeforeRangeTemp,dummyRecord])\r\n  |> tableFind(fn: (key) => key._field == \"STATUS\"  )\r\n  |> getColumn(column: \"_value\")         \r\n\r\nreturn lastStatusBeforeRange[length(arr:lastStatusBeforeRange)-1]\r\n}\r\n\r\nDeviceData=from(bucket: \"telemetry\")\r\n  |> range([[range]])\r\n  |> filter(fn: (r) => r._measurement == \"DeviceData\" )\r\n  |> filter(fn: (r) => r.Source       == \"[[Source]]\" )\r\n  |> group()\r\n  |> keep(columns: [\"_time\",\"_field\",\"_value\"])\r\n\r\nItemCountGoodData=\r\n  DeviceData\r\n  |> filter(fn: (r) => r._field == \"ITEM_COUNT_GOOD\" )\r\n  |> aggregateWindow(every: 1m, fn: sum)\r\n  |> map(fn: (r) => ({r with _field: \"Good Items\"}))\r\n  |> cumulativeSum()\r\n\r\nItemCountBadData=\r\n  DeviceData\r\n  |> filter(fn: (r) => r._field == \"ITEM_COUNT_BAD\" )\r\n  |> aggregateWindow(every: 1m, fn: sum)\r\n  |> map(fn: (r) => ({r with _field: \"Bad Items\"}))\r\n  |> cumulativeSum()\r\n\r\nStatusData=\r\n  DeviceData\r\n  |> filter(fn: (r) =>  r._field == \"STATUS\")\r\n  |> map(fn: (r) => ({\r\n      _time: r._time, \r\n      _value: float(v: contains(value: int(v: r._value), \r\n                                       set: StatusValuesForOn ))\r\n  }))\r\n\r\nStatusDataWindowed=\r\n  StatusData\r\n  |> aggregateWindow(every: 1m, fn: mean)\r\n  |> fill(column: \"_value\", usePrevious: true) \r\n  |> fill(column: \"_value\", value: fGetLastStatus()) \r\n  |> map(fn: (r) => ({_time: r._time, _value: math.ceil(x: r._value)}))\r\n  \r\nRunningMins=\r\n  StatusDataWindowed\r\n  |> cumulativeSum()\r\n\r\nIdleMins=\r\n  StatusDataWindowed\r\n  |> map(fn: (r) => ({\r\n     _value: 1.0 - r._value,\r\n     _time: r._time,\r\n    }))\r\n  |> cumulativeSum()\r\n\r\nAvailability=\r\n  join(\r\n    tables: {on: RunningMins, off: IdleMins},\r\n    on: [\"_time\"]\r\n  )\r\n  |> map(fn: (r) => ({\r\n     _value: if r._value_on+r._value_off == 0.0 then 0.0 \r\n             else r._value_on/(r._value_on+r._value_off),\r\n     _time: r._time,\r\n     _field: \"Availability\"\r\n    }))\r\n\r\n  \r\nQuality=\r\n  join(\r\n    tables: {good: ItemCountGoodData, bad: ItemCountBadData},\r\n    on: [\"_time\"]\r\n  )\r\n  |> map(fn: (r) => ({\r\n     _value: if r._value_good+r._value_bad == 0.0 then 0.0 \r\n             else r._value_good/(r._value_good+r._value_bad),\r\n     _time: r._time,\r\n     _field: \"Quality\"\r\n    }))\r\n\r\n\r\n\r\nPerformance=\r\n  join(\r\n    tables: {good: ItemCountGoodData, on: RunningMins},\r\n    on: [\"_time\"]\r\n  )\r\n  |> map(fn: (r) => ({\r\n     _value: if r._value_on == 0.0 or float(v:$idealRunrate) == 0.0 then 0.0 \r\n             else (r._value_good/r._value_on)/float(v:$idealRunrate),\r\n     _time: r._time,\r\n     _value_on : r._value_on, _value_good: r._value_good,\r\n     _field: \"Performance\"\r\n    }))\r\n\r\n\r\n\r\n\r\nAxQ=\r\n  join(\r\n    tables: {a:Availability, q: Quality},\r\n    on: [\"_time\"]\r\n  )\r\n  |> map(fn: (r) => ({\r\n     _value: r._value_a * r._value_q,\r\n     _time: r._time,\r\n     _field: \"AxQ\"\r\n    }))\r\n\r\nOEE=\r\n  join(\r\n    tables: {axq:AxQ, p: Performance},\r\n    on: [\"_time\"]\r\n  )\r\n  |> map(fn: (r) => ({\r\n     _value: r._value_axq * r._value_p,\r\n     _time: r._time,\r\n     _field: \"OEE\"\r\n    }))\r\n\r\nOEE\r\n|>yield(name: \"OEE\")\r\n\r\nAvailability\r\n|>yield(name: \"Availability\")\r\n\r\nQuality\r\n|>yield(name: \"Quality\")\r\n\r\nPerformance\r\n|>yield(name: \"Performance\")\r\n\r\n \r\n   \r\n RunStatus=\r\n  StatusDataWindowed\r\n  |> map(fn: (r) => ({\r\n     _value: r._value,\r\n     _time: r._time,\r\n     _field: \"Running\"\r\n    }))\r\n  |> aggregateWindow(every: 1m, fn: max)\r\n  |> yield(name: \"Run Status\") ",
          "refId": "A",
          "resultFormat": "time_series"
        }
      ],
      "thresholds": [
        {
          "colorMode": "custom",
          "fill": false,
          "fillColor": "rgba(50, 116, 217, 0.2)",
          "line": true,
          "lineColor": "rgb(122, 122, 119)",
          "op": "gt",
          "value": 1,
          "yaxis": "left"
        }
      ],
      "timeFrom": null,
      "timeRegions": [
        {
          "colorMode": "custom",
          "fill": false,
          "fillColor": "rgb(54, 50, 47)",
          "from": "00:00",
          "line": true,
          "lineColor": "#6a8a82",
          "op": "time",
          "to": "08:00"
        },
        {
          "colorMode": "custom",
          "fill": false,
          "fillColor": "rgb(51, 45, 36)",
          "from": "08:00",
          "line": true,
          "lineColor": "#6a8a82",
          "op": "time",
          "to": "16:00"
        },
        {
          "colorMode": "custom",
          "fill": false,
          "fillColor": "rgb(66, 60, 47)",
          "from": "16:00",
          "line": true,
          "lineColor": "#6a8a82",
          "op": "time",
          "to": "00:00"
        }
      ],
      "timeShift": null,
      "title": "KPIs",
      "tooltip": {
        "shared": true,
        "sort": 0,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "buckets": null,
        "mode": "time",
        "name": null,
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "decimals": 0,
          "format": "percentunit",
          "label": "%",
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        },
        {
          "decimals": null,
          "format": "short",
          "label": "# Items/min",
          "logBase": 1,
          "max": null,
          "min": null,
          "show": false
        }
      ],
      "yaxis": {
        "align": false,
        "alignLevel": null
      }
    },
    {
      "aliasColors": {
        " Availability": "#00743f",
        " OEE": "semi-dark-blue",
        " Performance": "#c05640",
        " Quality": "#be9063",
        " Running": "light-green"
      },
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": "myinfluxdb",
      "decimals": null,
      "fill": 0,
      "fillGradient": 0,
      "gridPos": {
        "h": 11,
        "w": 12,
        "x": 12,
        "y": 27
      },
      "hiddenSeries": false,
      "id": 49,
      "interval": "1m",
      "legend": {
        "alignAsTable": true,
        "avg": true,
        "current": true,
        "max": true,
        "min": true,
        "rightSide": false,
        "show": true,
        "sort": "min",
        "sortDesc": false,
        "total": false,
        "values": true
      },
      "lines": true,
      "linewidth": 1,
      "nullPointMode": "null",
      "options": {
        "dataLinks": []
      },
      "percentage": false,
      "pointradius": 2,
      "points": false,
      "renderer": "flot",
      "repeatIteration": 1591995668192,
      "repeatPanelId": 27,
      "repeatedByRow": true,
      "scopedVars": {
        "Source": {
          "selected": true,
          "text": "urn:edgevm3.internal.cloudapp.net:OPC-Site-02",
          "value": "urn:edgevm3.internal.cloudapp.net:OPC-Site-02"
        }
      },
      "seriesOverrides": [
        {
          "alias": " Bad Items",
          "color": "#a1414a",
          "yaxis": 2
        },
        {
          "alias": " Good Items",
          "color": "#00743f",
          "yaxis": 2
        },
        {
          "alias": " IdealRunrate",
          "color": "#be9063",
          "yaxis": 2
        },
        {
          "alias": " Running",
          "steppedLine": true,
          "yaxis": 1
        },
        {
          "alias": " OEE",
          "color": "#f2a104",
          "linewidth": 3,
          "yaxis": 1
        },
        {
          "alias": " Performance",
          "color": "#ee6c81",
          "yaxis": 1
        },
        {
          "alias": " Availability",
          "color": "#80add7",
          "yaxis": 1
        },
        {
          "alias": " Quality",
          "color": "#A352CC",
          "yaxis": 1
        }
      ],
      "spaceLength": 10,
      "stack": false,
      "steppedLine": false,
      "targets": [
        {
          "query": "\n\r\nDeviceData=from(bucket: \"telemetry\")\r\n  |> range([[range]])\r\n  |> filter(fn: (r) => r._measurement == \"DeviceData\" )\r\n  |> filter(fn: (r) => r.Source       == \"[[Source]]\" )\r\n  |> group()\r\n  |> keep(columns: [\"_time\",\"_field\",\"_value\"])\r\n\r\nItemCountGoodData=\r\n  DeviceData\r\n  |> filter(fn: (r) => r._field == \"ITEM_COUNT_GOOD\" )\r\n  |> aggregateWindow(every: 1m, fn: sum)\r\n  |> map(fn: (r) => ({r with _field: \"Good Items\"}))\r\n  |> yield(name: \"Good Items\")\r\n  |> cumulativeSum()\r\n\r\nItemCountBadData=\r\n  DeviceData\r\n  |> filter(fn: (r) => r._field == \"ITEM_COUNT_BAD\" )\r\n  |> aggregateWindow(every: 1m, fn: sum)\r\n  |> map(fn: (r) => ({r with _field: \"Bad Items\"}))\r\n  |> yield(name: \"Bad Items\")\r\n  |> cumulativeSum()\r\n\r\n  \r\nQuality=\r\n  join(\r\n    tables: {good: ItemCountGoodData, bad: ItemCountBadData},\r\n    on: [\"_time\"]\r\n  )\r\n  |> map(fn: (r) => ({\r\n     _value: if r._value_good+r._value_bad == 0.0 then 0.0 \r\n             else r._value_good/(r._value_good+r._value_bad),\r\n     _time: r._time,\r\n     _field: \"Quality\"\r\n    }))\r\n\r\n\r\n\r\nQuality\r\n|>yield(name: \"Quality\")\r\n\n\r\nIdealRunrate=\r\n  DeviceData\r\n  |> filter(fn: (r) =>\r\n    r._field == \"STATUS\"\r\n  )\r\n  |> aggregateWindow(every: 1m, fn: sum)\r\n  |> map(fn: (r) => ({\r\n     _value: float(v:$idealRunrate),\r\n     _time: r._time,\r\n     _field: \"IdealRunrate\"\r\n    }))\r\n  |> yield(name: \"IdealRunrate\")\r\n \r\n  ",
          "refId": "A",
          "resultFormat": "time_series"
        }
      ],
      "thresholds": [
        {
          "colorMode": "custom",
          "fill": false,
          "fillColor": "rgba(50, 116, 217, 0.2)",
          "line": true,
          "lineColor": "rgb(122, 122, 119)",
          "op": "gt",
          "value": 1,
          "yaxis": "left"
        }
      ],
      "timeFrom": null,
      "timeRegions": [
        {
          "colorMode": "custom",
          "fill": false,
          "fillColor": "rgb(54, 50, 47)",
          "from": "00:00",
          "line": true,
          "lineColor": "#6a8a82",
          "op": "time",
          "to": "08:00"
        },
        {
          "colorMode": "custom",
          "fill": false,
          "fillColor": "rgb(51, 45, 36)",
          "from": "08:00",
          "line": true,
          "lineColor": "#6a8a82",
          "op": "time",
          "to": "16:00"
        },
        {
          "colorMode": "custom",
          "fill": false,
          "fillColor": "rgb(66, 60, 47)",
          "from": "16:00",
          "line": true,
          "lineColor": "#6a8a82",
          "op": "time",
          "to": "00:00"
        }
      ],
      "timeShift": null,
      "title": "Throughput vs Quality",
      "tooltip": {
        "shared": true,
        "sort": 0,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "buckets": null,
        "mode": "time",
        "name": null,
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "decimals": 0,
          "format": "percentunit",
          "label": "%",
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        },
        {
          "decimals": null,
          "format": "short",
          "label": "# Items/min",
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        }
      ],
      "yaxis": {
        "align": false,
        "alignLevel": null
      }
    }
  ],
  "refresh": false,
  "schemaVersion": 22,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": [
      {
        "current": {
          "text": "1400",
          "value": "1400"
        },
        "hide": 0,
        "label": "Ideal Run Rate (items/min)",
        "name": "idealRunrate",
        "options": [
          {
            "selected": true,
            "text": "1400",
            "value": "1400"
          }
        ],
        "query": "1400",
        "skipUrlSync": false,
        "type": "constant"
      },
      {
        "allValue": null,
        "current": {
          "text": "urn:edgevm3.internal.cloudapp.net:OPC-Site-01 + urn:edgevm3.internal.cloudapp.net:OPC-Site-02",
          "value": [
            "urn:edgevm3.internal.cloudapp.net:OPC-Site-01",
            "urn:edgevm3.internal.cloudapp.net:OPC-Site-02"
          ]
        },
        "datasource": "myinfluxdb",
        "definition": "from(bucket: \"telemetry\")\n  |> range($range)\n  |> filter(fn: (r) =>\n    r._measurement == \"DeviceData\"\n  )\n\n|> keep(columns:[\"Source\"])\n  |> distinct(column: \"Source\")\n\n\n",
        "hide": 0,
        "includeAll": false,
        "index": -1,
        "label": "Site",
        "multi": true,
        "name": "Source",
        "options": [],
        "query": "from(bucket: \"telemetry\")\n  |> range($range)\n  |> filter(fn: (r) =>\n    r._measurement == \"DeviceData\"\n  )\n\n|> keep(columns:[\"Source\"])\n  |> distinct(column: \"Source\")\n\n\n",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 1,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      }
    ]
  },
  "time": {
    "from": "now-1h",
    "to": "now"
  },
  "timepicker": {
    "refresh_intervals": [
      "1m",
      "5m",
      "15m",
      "30m",
      "1h",
      "2h",
      "1d"
    ]
  },
  "timezone": "",
  "title": "Production at a glance",
  "uid": "xIrX9siGz",
  "variables": {
    "list": []
  },
  "version": 6
}