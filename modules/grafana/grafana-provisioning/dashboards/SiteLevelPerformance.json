{
    "annotations": {
      "list": [
        {
          "builtIn": 1,
          "datasource": "-- Grafana --",
          "enable": true,
          "hide": true,
          "iconColor": "rgba(0, 211, 255, 1)",
          "name": "Annotations & Alerts",
          "type": "dashboard"
        }
      ]
    },
    "editable": true,
    "gnetId": null,
    "graphTooltip": 0,
    "id": 8,
    "iteration": 1590070930036,
    "links": [],
    "panels": [
      {
        "datasource": "myinfluxdb",
        "gridPos": {
          "h": 8,
          "w": 5,
          "x": 0,
          "y": 0
        },
        "id": 19,
        "options": {
          "fieldOptions": {
            "calcs": [
              "mean"
            ],
            "defaults": {
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "#a1414a",
                    "value": null
                  },
                  {
                    "color": "#f2a104",
                    "value": 0.9
                  },
                  {
                    "color": "#00743f",
                    "value": 0.95
                  }
                ]
              },
              "unit": "percentunit"
            },
            "overrides": [],
            "values": false
          },
          "orientation": "auto",
          "showThresholdLabels": false,
          "showThresholdMarkers": true
        },
        "pluginVersion": "6.7.1",
        "targets": [
          {
            "query": "import \"math\"\r\nStatusValuesForOn = [101,105,108]\r\n\r\nfGetLastStatus = () => {\r\nfirstStatusTimestamp=\r\n  from(bucket: \"telemetry\")\r\n  |> range([[range]])\r\n  |> filter(fn: (r) => r._measurement == \"DeviceData\" )\r\n  |> filter(fn: (r) => r.Source       == \"[[Source]]\" )\r\n  |> filter(fn: (r) => r._field       == \"STATUS\" )\r\n  |> first()\r\n  |> tableFind(fn: (key) => key._field == \"STATUS\"  )\r\n  |> getColumn(column: \"_time\")\r\n\r\nlastStatusBeforeRange=\r\nfrom(bucket: \"telemetry\")\r\n  |> range(start:-1000d, \r\n           stop: time(v:uint(v:firstStatusTimestamp[0])-uint(v:1)))\r\n  |> filter(fn: (r) => r._measurement == \"DeviceData\" )\r\n  |> filter(fn: (r) => r.Source       == \"[[Source]]\" )\r\n  |> map(fn: (r) => ({\r\n        _field: \"STATUS\",\r\n        _time: r._time, \r\n        _value: float(v: contains(value: int(v: r._value),\r\n                                  set  : StatusValuesForOn ))\r\n      }))\r\n  |> last()\r\n  |> tableFind(fn: (key) => key._field == \"STATUS\"  )\r\n  |> getColumn(column: \"_value\")         \r\n\r\nreturn lastStatusBeforeRange[length(arr:lastStatusBeforeRange)-1]\r\n}\r\n\r\nDeviceData=from(bucket: \"telemetry\")\r\n  |> range([[range]])\r\n  |> filter(fn: (r) => r._measurement == \"DeviceData\" )\r\n  |> filter(fn: (r) => r.Source       == \"[[Source]]\" )\r\n  |> group()\r\n  |> keep(columns: [\"_time\",\"_field\",\"_value\"])\r\n\r\nItemCountGoodData=\r\n  DeviceData\r\n  |> filter(fn: (r) => r._field == \"ITEM_COUNT_GOOD\" )\r\n  |> aggregateWindow(every: 1m, fn: sum)\r\n  |> sum()\r\n  |> map(fn: (r) => ({\r\n     _value: r._value,\r\n     _time: now()\r\n    }))\r\n\r\nItemCountBadData=\r\n  DeviceData\r\n  |> filter(fn: (r) => r._field == \"ITEM_COUNT_BAD\" )\r\n  |> aggregateWindow(every: 1m, fn: sum)\r\n  |> sum()\r\n  |> map(fn: (r) => ({\r\n     _value: r._value,\r\n     _time: now()\r\n    }))\r\n\r\nStatusData=\r\n  DeviceData\r\n  |> filter(fn: (r) =>  r._field == \"STATUS\")\r\n  |> map(fn: (r) => ({\r\n      _time: r._time, \r\n      _value: float(v: contains(value: int(v: r._value), \r\n                                       set: StatusValuesForOn ))\r\n  }))\r\n\r\nStatusDataWindowed=\r\n  StatusData\r\n  |> aggregateWindow(every: 1m, fn: mean)\r\n  |> fill(column: \"_value\", usePrevious: true) \r\n  |> fill(column: \"_value\", value: fGetLastStatus()) \r\n  |> map(fn: (r) => ({_time: r._time, _value: math.ceil(x: r._value)}))\r\n  \r\nRunningMins=\r\n  StatusDataWindowed\r\n  |> sum()\r\n  |> map(fn: (r) => ({\r\n     _value: r._value,\r\n     _time: now()\r\n    }))\r\n\r\nIdleMins=\r\n  StatusDataWindowed\r\n  |> map(fn: (r) => ({\r\n     _value: 1.0 - r._value,\r\n     _time: r._time,\r\n    }))\r\n  |> sum()\r\n  |> map(fn: (r) => ({\r\n     _value: r._value,\r\n     _time: now()\r\n    }))\r\n\r\nAvailability=\r\n  join(\r\n    tables: {on: RunningMins, off: IdleMins},\r\n    on: [\"_time\"]\r\n  )\r\n  |> map(fn: (r) => ({\r\n     _value: if r._value_on+r._value_off == 0.0 then 0.0 \r\n             else r._value_on/(r._value_on+r._value_off),\r\n     _time: r._time,\r\n     _field: \"Availability\"\r\n    }))\r\n    \r\nQuality=\r\n  join(\r\n    tables: {good: ItemCountGoodData, bad: ItemCountBadData},\r\n    on: [\"_time\"]\r\n  )\r\n  |> map(fn: (r) => ({\r\n     _value: if r._value_good+r._value_bad == 0.0 then 0.0 \r\n             else r._value_good/(r._value_good+r._value_bad),\r\n     _time: r._time,\r\n     _field: \"Quality\"\r\n    }))\r\n\r\nPerformance=\r\n  join(\r\n    tables: {good: ItemCountGoodData, on: RunningMins},\r\n    on: [\"_time\"]\r\n  )\r\n  |> map(fn: (r) => ({\r\n     _value: if r._value_on == 0.0 or float(v:$idealRunrate) == 0.0 then 0.0 \r\n             else (r._value_good/r._value_on)/float(v:$idealRunrate),\r\n     _time: r._time,\r\n     _value_on : r._value_on, _value_good: r._value_good,\r\n     _field: \"Performance\"\r\n    }))\r\n\r\nAxQ=\r\n  join(\r\n    tables: {a:Availability, q: Quality},\r\n    on: [\"_time\"]\r\n  )\r\n  |> map(fn: (r) => ({\r\n     _value: r._value_a * r._value_q,\r\n     _time: r._time,\r\n     _field: \"AxQ\"\r\n    }))\r\n\r\nOEE=\r\n  join(\r\n    tables: {axq:AxQ, p: Performance},\r\n    on: [\"_time\"]\r\n  )\r\n  |> map(fn: (r) => ({\r\n     _value: r._value_axq * r._value_p,\r\n     _time: r._time,\r\n     _field: \"OEE\"\r\n    }))\r\n  |> yield(name: \"OEE\")\r\n",
            "refId": "A"
          }
        ],
        "timeFrom": null,
        "timeShift": null,
        "title": "OEE",
        "type": "gauge"
      },
      {
        "aliasColors": {
          " OEE": "#f49f05"
        },
        "bars": false,
        "dashLength": 10,
        "dashes": false,
        "datasource": "myinfluxdb",
        "decimals": null,
        "fill": 0,
        "fillGradient": 0,
        "gridPos": {
          "h": 8,
          "w": 19,
          "x": 5,
          "y": 0
        },
        "hiddenSeries": false,
        "id": 10,
        "interval": "1m",
        "legend": {
          "alignAsTable": false,
          "avg": true,
          "current": true,
          "max": true,
          "min": true,
          "rightSide": false,
          "show": true,
          "total": false,
          "values": true
        },
        "lines": true,
        "linewidth": 3,
        "nullPointMode": "null",
        "options": {
          "dataLinks": []
        },
        "percentage": false,
        "pointradius": 2,
        "points": false,
        "renderer": "flot",
        "seriesOverrides": [],
        "spaceLength": 10,
        "stack": false,
        "steppedLine": false,
        "targets": [
          {
            "query": "import \"math\"\r\nStatusValuesForOn = [101,105,108]\r\n\r\nfGetLastStatus = () => {\r\nfirstStatusTimestamp=\r\n  from(bucket: \"telemetry\")\r\n  |> range([[range]])\r\n  |> filter(fn: (r) => r._measurement == \"DeviceData\" )\r\n  |> filter(fn: (r) => r.Source       == \"[[Source]]\" )\r\n  |> filter(fn: (r) => r._field       == \"STATUS\" )\r\n  |> first()\r\n  |> tableFind(fn: (key) => key._field == \"STATUS\"  )\r\n  |> getColumn(column: \"_time\")\r\n\r\nlastStatusBeforeRange=\r\nfrom(bucket: \"telemetry\")\r\n  |> range(start:-1000d, \r\n           stop: time(v:uint(v:firstStatusTimestamp[0])-uint(v:1)))\r\n  |> filter(fn: (r) => r._measurement == \"DeviceData\" )\r\n  |> filter(fn: (r) => r.Source       == \"[[Source]]\" )\r\n  |> map(fn: (r) => ({\r\n        _field: \"STATUS\",\r\n        _time: r._time, \r\n        _value: float(v: contains(value: int(v: r._value),\r\n                                  set  : StatusValuesForOn ))\r\n      }))\r\n  |> last()\r\n  |> tableFind(fn: (key) => key._field == \"STATUS\"  )\r\n  |> getColumn(column: \"_value\")         \r\n\r\nreturn lastStatusBeforeRange[length(arr:lastStatusBeforeRange)-1]\r\n}\r\n\r\nDeviceData=from(bucket: \"telemetry\")\r\n  |> range([[range]])\r\n  |> filter(fn: (r) => r._measurement == \"DeviceData\" )\r\n  |> filter(fn: (r) => r.Source       == \"[[Source]]\" )\r\n  |> group()\r\n  |> keep(columns: [\"_time\",\"_field\",\"_value\"])\r\n\r\nItemCountGoodData=\r\n  DeviceData\r\n  |> filter(fn: (r) => r._field == \"ITEM_COUNT_GOOD\" )\r\n  |> aggregateWindow(every: 1m, fn: sum)\r\n  |> cumulativeSum()\r\n\r\nItemCountBadData=\r\n  DeviceData\r\n  |> filter(fn: (r) => r._field == \"ITEM_COUNT_BAD\" )\r\n  |> aggregateWindow(every: 1m, fn: sum)\r\n  |> cumulativeSum()\r\n\r\nStatusData=\r\n  DeviceData\r\n  |> filter(fn: (r) =>  r._field == \"STATUS\")\r\n  |> map(fn: (r) => ({\r\n      _time: r._time, \r\n      _value: float(v: contains(value: int(v: r._value), \r\n                                       set: StatusValuesForOn ))\r\n  }))\r\n\r\nStatusDataWindowed=\r\n  StatusData\r\n  |> aggregateWindow(every: 1m, fn: mean)\r\n  |> fill(column: \"_value\", usePrevious: true) \r\n  |> fill(column: \"_value\", value: fGetLastStatus()) \r\n  |> map(fn: (r) => ({_time: r._time, _value: math.ceil(x: r._value)}))\r\n  \r\nRunningMins=\r\n  StatusDataWindowed\r\n  |> cumulativeSum()\r\n\r\nIdleMins=\r\n  StatusDataWindowed\r\n  |> map(fn: (r) => ({\r\n     _value: 1.0 - r._value,\r\n     _time: r._time,\r\n    }))\r\n  |> cumulativeSum()\r\n\r\nAvailability=\r\n  join(\r\n    tables: {on: RunningMins, off: IdleMins},\r\n    on: [\"_time\"]\r\n  )\r\n  |> map(fn: (r) => ({\r\n     _value: if r._value_on+r._value_off == 0.0 then 0.0 \r\n             else r._value_on/(r._value_on+r._value_off),\r\n     _time: r._time,\r\n     _field: \"Availability\"\r\n    }))\r\n    \r\nQuality=\r\n  join(\r\n    tables: {good: ItemCountGoodData, bad: ItemCountBadData},\r\n    on: [\"_time\"]\r\n  )\r\n  |> map(fn: (r) => ({\r\n     _value: if r._value_good+r._value_bad == 0.0 then 0.0 \r\n             else r._value_good/(r._value_good+r._value_bad),\r\n     _time: r._time,\r\n     _field: \"Quality\"\r\n    }))\r\n\r\nPerformance=\r\n  join(\r\n    tables: {good: ItemCountGoodData, on: RunningMins},\r\n    on: [\"_time\"]\r\n  )\r\n  |> map(fn: (r) => ({\r\n     _value: if r._value_on == 0.0 or float(v:$idealRunrate) == 0.0 then 0.0 \r\n             else (r._value_good/r._value_on)/float(v:$idealRunrate),\r\n     _time: r._time,\r\n     _value_on : r._value_on, _value_good: r._value_good,\r\n     _field: \"Performance\"\r\n    }))\r\n\r\nAxQ=\r\n  join(\r\n    tables: {a:Availability, q: Quality},\r\n    on: [\"_time\"]\r\n  )\r\n  |> map(fn: (r) => ({\r\n     _value: r._value_a * r._value_q,\r\n     _time: r._time,\r\n     _field: \"AxQ\"\r\n    }))\r\n\r\nOEE=\r\n  join(\r\n    tables: {axq:AxQ, p: Performance},\r\n    on: [\"_time\"]\r\n  )\r\n  |> map(fn: (r) => ({\r\n     _value: r._value_axq * r._value_p,\r\n     _time: r._time,\r\n     _field: \"OEE\"\r\n    }))\r\n  |> yield(name: \"OEE\")\r\n",
            "refId": "A",
            "resultFormat": "time_series"
          }
        ],
        "thresholds": [],
        "timeFrom": null,
        "timeRegions": [
          {
            "colorMode": "custom",
            "fill": false,
            "fillColor": "rgb(54, 50, 47)",
            "from": "00:00",
            "line": true,
            "lineColor": "#6a8a82",
            "op": "time",
            "to": "08:00"
          },
          {
            "colorMode": "custom",
            "fill": false,
            "fillColor": "rgb(51, 45, 36)",
            "from": "08:00",
            "line": true,
            "lineColor": "#6a8a82",
            "op": "time",
            "to": "16:00"
          },
          {
            "colorMode": "custom",
            "fill": false,
            "fillColor": "rgb(66, 60, 47)",
            "from": "16:00",
            "line": true,
            "lineColor": "#6a8a82",
            "op": "time",
            "to": "00:00"
          }
        ],
        "timeShift": null,
        "title": "OEE History",
        "tooltip": {
          "shared": true,
          "sort": 0,
          "value_type": "individual"
        },
        "type": "graph",
        "xaxis": {
          "buckets": null,
          "mode": "time",
          "name": null,
          "show": true,
          "values": []
        },
        "yaxes": [
          {
            "decimals": 0,
            "format": "percentunit",
            "label": "OEE%",
            "logBase": 1,
            "max": "1",
            "min": null,
            "show": true
          },
          {
            "format": "short",
            "label": null,
            "logBase": 1,
            "max": null,
            "min": null,
            "show": true
          }
        ],
        "yaxis": {
          "align": false,
          "alignLevel": null
        }
      },
      {
        "datasource": "myinfluxdb",
        "gridPos": {
          "h": 8,
          "w": 5,
          "x": 0,
          "y": 8
        },
        "id": 17,
        "options": {
          "fieldOptions": {
            "calcs": [
              "mean"
            ],
            "defaults": {
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "#a1414a",
                    "value": null
                  },
                  {
                    "color": "#f2a104",
                    "value": 0.85
                  },
                  {
                    "color": "#00743f",
                    "value": 0.9
                  }
                ]
              },
              "unit": "percentunit"
            },
            "overrides": [],
            "values": false
          },
          "orientation": "auto",
          "showThresholdLabels": false,
          "showThresholdMarkers": true
        },
        "pluginVersion": "6.7.1",
        "targets": [
          {
            "query": "import \"math\"\r\nStatusValuesForOn = [101,105,108]\r\n\r\nfGetLastStatus = () => {\r\nfirstStatusTimestamp=\r\n  from(bucket: \"telemetry\")\r\n  |> range([[range]])\r\n  |> filter(fn: (r) => r._measurement == \"DeviceData\" )\r\n  |> filter(fn: (r) => r.Source       == \"[[Source]]\" )\r\n  |> filter(fn: (r) => r._field       == \"STATUS\" )\r\n  |> first()\r\n  |> tableFind(fn: (key) => key._field == \"STATUS\"  )\r\n  |> getColumn(column: \"_time\")\r\n\r\nlastStatusBeforeRange=\r\nfrom(bucket: \"telemetry\")\r\n  |> range(start:-1000d, \r\n           stop: time(v:uint(v:firstStatusTimestamp[0])-uint(v:1)))\r\n  |> filter(fn: (r) => r._measurement == \"DeviceData\" )\r\n  |> filter(fn: (r) => r.Source       == \"[[Source]]\" )\r\n  |> map(fn: (r) => ({\r\n        _field: \"STATUS\",\r\n        _time: r._time, \r\n        _value: float(v: contains(value: int(v: r._value),\r\n                                  set  : StatusValuesForOn ))\r\n      }))\r\n  |> last()\r\n  |> tableFind(fn: (key) => key._field == \"STATUS\"  )\r\n  |> getColumn(column: \"_value\")         \r\n\r\nreturn lastStatusBeforeRange[length(arr:lastStatusBeforeRange)-1]\r\n}\r\n\r\nDeviceData=from(bucket: \"telemetry\")\r\n  |> range([[range]])\r\n  |> filter(fn: (r) => r._measurement == \"DeviceData\" )\r\n  |> filter(fn: (r) => r.Source       == \"[[Source]]\" )\r\n\r\n \r\nStatusData=\r\n  DeviceData\r\n  |> filter(fn: (r) =>  r._field == \"STATUS\")\r\n  |> map(fn: (r) => ({\r\n      _time: r._time, \r\n      _value: float(v: contains(value: int(v: r._value), \r\n                                       set: StatusValuesForOn ))\r\n  }))\r\n\r\n\r\nStatusDataWindowed=\r\n  StatusData\r\n  |> aggregateWindow(every: 1m, fn: mean)\r\n  |> fill(column: \"_value\", usePrevious: true) \r\n  |> fill(column: \"_value\", value: fGetLastStatus()) \r\n  |> map(fn: (r) => ({_time: r._time, _value: math.ceil(x: r._value)}))\r\n  \r\nRunningMins=\r\n  StatusDataWindowed\r\n  |> sum()\r\n  |> map(fn: (r) => ({\r\n     _value: r._value,\r\n     _time: now()\r\n    }))\r\n\r\n  \r\nIdleMins=\r\n  StatusDataWindowed\r\n  |> map(fn: (r) => ({\r\n     _value: 1.0 - r._value,\r\n     _time: r._time,\r\n    }))\r\n  |> sum()\r\n  |> map(fn: (r) => ({\r\n     _value: r._value,\r\n     _time: now()\r\n    }))\r\n\r\n\r\nAvailability=\r\n  join(\r\n    tables: {on: RunningMins, off: IdleMins},\r\n    on: [\"_time\"]\r\n  )\r\n  |> map(fn: (r) => ({\r\n     _value: if r._value_on+r._value_off == 0.0 then 0.0 \r\n             else r._value_on/(r._value_on+r._value_off),\r\n     _time: r._time,\r\n     _field: \"Availability\"\r\n    }))\r\n  |> yield(name: \"Availability\")\r\n",
            "refId": "A"
          }
        ],
        "timeFrom": null,
        "timeShift": null,
        "title": "Availability",
        "type": "gauge"
      },
      {
        "aliasColors": {
          " Availability": "#f49f05",
          " Running": "#36688d"
        },
        "bars": false,
        "dashLength": 10,
        "dashes": false,
        "datasource": "myinfluxdb",
        "fill": 0,
        "fillGradient": 0,
        "gridPos": {
          "h": 8,
          "w": 19,
          "x": 5,
          "y": 8
        },
        "hiddenSeries": false,
        "id": 7,
        "interval": "1m",
        "legend": {
          "alignAsTable": false,
          "avg": true,
          "current": false,
          "max": true,
          "min": true,
          "rightSide": false,
          "show": true,
          "total": false,
          "values": true
        },
        "lines": true,
        "linewidth": 3,
        "nullPointMode": "null",
        "options": {
          "dataLinks": []
        },
        "percentage": false,
        "pointradius": 2,
        "points": false,
        "renderer": "flot",
        "seriesOverrides": [
          {
            "alias": " Running",
            "color": "#36688d",
            "legend": false,
            "lines": true,
            "linewidth": 1,
            "steppedLine": true,
            "yaxis": 2
          }
        ],
        "spaceLength": 10,
        "stack": false,
        "steppedLine": false,
        "targets": [
          {
            "query": "import \"math\"\r\nStatusValuesForOn = [101,105,108]\r\n\r\nfGetLastStatus = () => {\r\nfirstStatusTimestamp=\r\n  from(bucket: \"telemetry\")\r\n  |> range([[range]])\r\n  |> filter(fn: (r) => r._measurement == \"DeviceData\" )\r\n  |> filter(fn: (r) => r.Source       == \"[[Source]]\" )\r\n  |> filter(fn: (r) => r._field       == \"STATUS\" )\r\n  |> first()\r\n  |> tableFind(fn: (key) => key._field == \"STATUS\"  )\r\n  |> getColumn(column: \"_time\")\r\n\r\nlastStatusBeforeRange=\r\nfrom(bucket: \"telemetry\")\r\n  |> range(start:-1000d, \r\n           stop: time(v:uint(v:firstStatusTimestamp[0])-uint(v:1)))\r\n  |> filter(fn: (r) => r._measurement == \"DeviceData\" )\r\n  |> filter(fn: (r) => r.Source       == \"[[Source]]\" )\r\n  |> map(fn: (r) => ({\r\n        _field: \"STATUS\",\r\n        _time: r._time, \r\n        _value: float(v: contains(value: int(v: r._value),\r\n                                  set  : StatusValuesForOn ))\r\n      }))\r\n  |> last()\r\n  |> tableFind(fn: (key) => key._field == \"STATUS\"  )\r\n  |> getColumn(column: \"_value\")         \r\n\r\nreturn lastStatusBeforeRange[length(arr:lastStatusBeforeRange)-1]\r\n}\r\n\r\n\r\nDeviceData=from(bucket: \"telemetry\")\r\n  |> range([[range]])\r\n  |> filter(fn: (r) => r._measurement == \"DeviceData\" )\r\n  |> filter(fn: (r) => r.Source       == \"[[Source]]\" )\r\n \r\nStatusData=\r\n  DeviceData\r\n  |> filter(fn: (r) =>  r._field == \"STATUS\")\r\n  |> map(fn: (r) => ({\r\n      _time: r._time, \r\n      _value: float(v: contains(value: int(v: r._value), \r\n                                       set: StatusValuesForOn ))\r\n  }))\r\n\r\nStatusDataWindowed=\r\n  StatusData\r\n  |> aggregateWindow(every: 1m, fn: mean)\r\n  |> fill(column: \"_value\", usePrevious: true) \r\n  |> fill(column: \"_value\", value: fGetLastStatus()) \r\n  |> map(fn: (r) => ({_time: r._time, _value: math.ceil(x: r._value)}))\r\n  \r\nRunningMins=\r\n  StatusDataWindowed\r\n  |> cumulativeSum()\r\n  \r\nIdleMins=\r\n  StatusDataWindowed\r\n  |> map(fn: (r) => ({\r\n     _value: 1.0 - r._value,\r\n     _time: r._time,\r\n    }))\r\n  |> cumulativeSum()\r\n\r\nAvailability=\r\n  join(\r\n    tables: {on: RunningMins, off: IdleMins},\r\n    on: [\"_time\"]\r\n  )\r\n  |> map(fn: (r) => ({\r\n     _value: if r._value_on+r._value_off == 0.0 then 0.0 \r\n             else r._value_on/(r._value_on+r._value_off),\r\n     _time: r._time,\r\n     _field: \"Availability\"\r\n    }))\r\n  |> yield(name: \"Availability\")\r\n\r\n\r\nRunStatus=\r\n  StatusDataWindowed\r\n  |> map(fn: (r) => ({\r\n     _value: r._value,\r\n     _time: r._time,\r\n     _field: \"Running\"\r\n    }))\r\n  |> aggregateWindow(every: 1m, fn: max)\r\n  |> yield(name: \"Run Status\")",
            "refId": "A",
            "resultFormat": "time_series"
          }
        ],
        "thresholds": [],
        "timeFrom": null,
        "timeRegions": [
          {
            "colorMode": "custom",
            "fill": false,
            "fillColor": "rgba(234, 112, 112, 0.12)",
            "from": "00:00",
            "line": true,
            "lineColor": "#6a8a82",
            "op": "time",
            "to": "08:00"
          },
          {
            "colorMode": "custom",
            "fill": false,
            "fillColor": "rgba(234, 112, 112, 0.12)",
            "from": "08:00",
            "line": true,
            "lineColor": "#6a8a82",
            "op": "time",
            "to": "16:00"
          },
          {
            "colorMode": "custom",
            "fill": false,
            "fillColor": "rgba(234, 112, 112, 0.12)",
            "from": "16:00",
            "line": true,
            "lineColor": "#6a8a82",
            "op": "time",
            "to": "00:00"
          }
        ],
        "timeShift": null,
        "title": "Availability History",
        "tooltip": {
          "shared": true,
          "sort": 0,
          "value_type": "individual"
        },
        "type": "graph",
        "xaxis": {
          "buckets": null,
          "mode": "time",
          "name": null,
          "show": true,
          "values": []
        },
        "yaxes": [
          {
            "decimals": 0,
            "format": "percentunit",
            "label": "Availability%",
            "logBase": 1,
            "max": "1",
            "min": null,
            "show": true
          },
          {
            "decimals": null,
            "format": "short",
            "label": null,
            "logBase": 1,
            "max": "2",
            "min": "0",
            "show": false
          }
        ],
        "yaxis": {
          "align": false,
          "alignLevel": null
        }
      },
      {
        "datasource": "myinfluxdb",
        "gridPos": {
          "h": 8,
          "w": 5,
          "x": 0,
          "y": 16
        },
        "id": 14,
        "options": {
          "fieldOptions": {
            "calcs": [
              "mean"
            ],
            "defaults": {
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "#a1414a",
                    "value": null
                  },
                  {
                    "color": "#f2a104",
                    "value": 0.9
                  },
                  {
                    "color": "#00743f",
                    "value": 0.95
                  }
                ]
              },
              "unit": "percentunit"
            },
            "overrides": [],
            "values": false
          },
          "orientation": "auto",
          "showThresholdLabels": false,
          "showThresholdMarkers": true
        },
        "pluginVersion": "6.7.1",
        "targets": [
          {
            "query": "DeviceData=from(bucket: \"telemetry\")\r\n  |> range([[range]])\r\n  |> filter(fn: (r) => r._measurement == \"DeviceData\" )\r\n  |> filter(fn: (r) => r.Source       == \"[[Source]]\" )\r\n  |> keep(columns: [\"_time\",\"_field\",\"_value\"])\r\n \r\nItemCountGoodData=\r\n  DeviceData\r\n  |> filter(fn: (r) => r._field == \"ITEM_COUNT_GOOD\" )\r\n  |> aggregateWindow(every: 1m, fn: sum)\r\n  |> sum()\r\n  |> map(fn: (r) => ({\r\n     _value: r._value,\r\n     _time: now()\r\n    }))\r\n\r\nItemCountBadData=\r\n  DeviceData\r\n  |> filter(fn: (r) => r._field == \"ITEM_COUNT_BAD\" )\r\n  |> aggregateWindow(every: 1m, fn: sum)\r\n  |> sum()\r\n  |> map(fn: (r) => ({\r\n     _value: r._value,\r\n     _time: now()\r\n    }))\r\n\r\nQuality=\r\n  join(\r\n    tables: {good: ItemCountGoodData, bad: ItemCountBadData},\r\n    on: [\"_time\"]\r\n  )\r\n  |> map(fn: (r) => ({\r\n     _value: if r._value_good+r._value_bad == 0.0 then 0.0 \r\n             else r._value_good/(r._value_good+r._value_bad),\r\n     _time: r._time,\r\n     _field: \"Quality\"\r\n    }))\r\n  |> yield(name: \"Quality\")\r\n",
            "refId": "A"
          }
        ],
        "timeFrom": null,
        "timeShift": null,
        "title": "Quality",
        "type": "gauge"
      },
      {
        "aliasColors": {
          " Bad Items": "#a1414a",
          " Good Items": "#00743f",
          " IdealRunrate": "#6465a5",
          " Quality": "#f49f05"
        },
        "bars": false,
        "dashLength": 10,
        "dashes": false,
        "datasource": "myinfluxdb",
        "fill": 0,
        "fillGradient": 0,
        "gridPos": {
          "h": 8,
          "w": 19,
          "x": 5,
          "y": 16
        },
        "hiddenSeries": false,
        "id": 20,
        "legend": {
          "alignAsTable": false,
          "avg": true,
          "current": false,
          "max": true,
          "min": true,
          "rightSide": false,
          "show": true,
          "total": false,
          "values": true
        },
        "lines": true,
        "linewidth": 3,
        "nullPointMode": "null",
        "options": {
          "dataLinks": []
        },
        "percentage": false,
        "pluginVersion": "6.7.1",
        "pointradius": 2,
        "points": false,
        "renderer": "flot",
        "seriesOverrides": [
          {
            "alias": " Bad Items",
            "color": "#a1414a",
            "linewidth": 1,
            "yaxis": 2
          },
          {
            "alias": " Good Items",
            "color": "#00743f",
            "linewidth": 1,
            "yaxis": 2
          },
          {
            "alias": " IdealRunrate",
            "color": "#6465a5",
            "dashes": true,
            "legend": false,
            "linewidth": 1,
            "yaxis": 2
          }
        ],
        "spaceLength": 10,
        "stack": false,
        "steppedLine": false,
        "targets": [
          {
            "query": "DeviceData=from(bucket: \"telemetry\")\r\n  |> range([[range]])\r\n  |> filter(fn: (r) => r._measurement == \"DeviceData\" )\r\n  |> filter(fn: (r) => r.Source       == \"[[Source]]\" )\r\n  |> keep(columns: [\"_time\",\"_field\",\"_value\"])\r\n \r\nItemCountGoodDataWindowed=\r\n  DeviceData\r\n  |> filter(fn: (r) => r._field == \"ITEM_COUNT_GOOD\" )\r\n  |> map(fn: (r) => ({r with _field: \"Good Items\"}))\r\n  |> aggregateWindow(every: 1m, fn: sum)\r\n  |> yield(name: \"Good Items\")\r\n\r\nItemCountGoodDataCumulative=\r\n  ItemCountGoodDataWindowed\r\n  |> cumulativeSum()\r\n\r\nItemCountBadDataWindowed=\r\n  DeviceData\r\n  |> filter(fn: (r) => r._field == \"ITEM_COUNT_BAD\" )\r\n  |> map(fn: (r) => ({r with _field: \"Bad Items\"}))\r\n  |> aggregateWindow(every: 1m, fn: sum)\r\n  |> yield(name: \"Bad Items\")\r\n\r\nItemCountBadDataCumulative=\r\n  ItemCountBadDataWindowed\r\n  |> cumulativeSum()\r\n\r\nQuality=\r\n  join(\r\n    tables: {good: ItemCountGoodDataCumulative, bad: ItemCountBadDataCumulative},\r\n    on: [\"_time\"]\r\n  )\r\n  |> map(fn: (r) => ({\r\n     _value: if r._value_good+r._value_bad == 0.0 then 0.0 \r\n             else r._value_good/(r._value_good+r._value_bad),\r\n     _time: r._time,\r\n     _field: \"Quality\"\r\n    }))\r\n  |> yield(name: \"Quality\")\r\n\r\nIdealRunrate=\r\n  DeviceData\r\n  |> filter(fn: (r) =>\r\n    r._field == \"STATUS\"\r\n  )\r\n  |> aggregateWindow(every: 1m, fn: sum)\r\n  |> map(fn: (r) => ({\r\n     _value: float(v:$idealRunrate),\r\n     _time: r._time,\r\n     _field: \"IdealRunrate\"\r\n    }))\r\n  |> yield(name: \"IdealRunrate\")\r\n",
            "refId": "A"
          }
        ],
        "thresholds": [],
        "timeFrom": null,
        "timeRegions": [
          {
            "colorMode": "custom",
            "fill": false,
            "fillColor": "rgba(234, 112, 112, 0.12)",
            "from": "00:00",
            "line": true,
            "lineColor": "#6a8a82",
            "op": "time",
            "to": "08:00"
          },
          {
            "colorMode": "custom",
            "fill": false,
            "fillColor": "rgba(234, 112, 112, 0.12)",
            "from": "08:00",
            "line": true,
            "lineColor": "#6a8a82",
            "op": "time",
            "to": "16:00"
          },
          {
            "colorMode": "custom",
            "fill": false,
            "fillColor": "rgba(55, 117, 65, 0.12)",
            "from": "16:00",
            "line": true,
            "lineColor": "#6a8a82",
            "op": "time",
            "to": "00:00"
          }
        ],
        "timeShift": null,
        "title": "Quality History",
        "tooltip": {
          "shared": true,
          "sort": 0,
          "value_type": "individual"
        },
        "type": "graph",
        "xaxis": {
          "buckets": null,
          "mode": "time",
          "name": null,
          "show": true,
          "values": []
        },
        "yaxes": [
          {
            "decimals": 1,
            "format": "percentunit",
            "label": "Quality%",
            "logBase": 1,
            "max": null,
            "min": null,
            "show": true
          },
          {
            "format": "short",
            "label": "# Items/min",
            "logBase": 1,
            "max": null,
            "min": null,
            "show": true
          }
        ],
        "yaxis": {
          "align": false,
          "alignLevel": null
        }
      },
      {
        "datasource": "myinfluxdb",
        "gridPos": {
          "h": 8,
          "w": 5,
          "x": 0,
          "y": 24
        },
        "id": 18,
        "options": {
          "fieldOptions": {
            "calcs": [
              "mean"
            ],
            "defaults": {
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "#a1414a",
                    "value": null
                  },
                  {
                    "color": "#f2a104",
                    "value": 0.9
                  },
                  {
                    "color": "#00743f",
                    "value": 0.95
                  }
                ]
              },
              "unit": "percentunit"
            },
            "overrides": [],
            "values": false
          },
          "orientation": "auto",
          "showThresholdLabels": false,
          "showThresholdMarkers": true
        },
        "pluginVersion": "6.7.1",
        "targets": [
          {
            "query": "import \"math\"\r\nStatusValuesForOn = [101,105,108]\r\n\r\nfGetLastStatus = () => {\r\nfirstStatusTimestamp=\r\n  from(bucket: \"telemetry\")\r\n  |> range([[range]])\r\n  |> filter(fn: (r) => r._measurement == \"DeviceData\" )\r\n  |> filter(fn: (r) => r.Source       == \"[[Source]]\" )\r\n  |> filter(fn: (r) => r._field       == \"STATUS\" )\r\n  |> first()\r\n  |> tableFind(fn: (key) => key._field == \"STATUS\"  )\r\n  |> getColumn(column: \"_time\")\r\n\r\nlastStatusBeforeRange=\r\nfrom(bucket: \"telemetry\")\r\n  |> range(start:-1000d, \r\n           stop: time(v:uint(v:firstStatusTimestamp[0])-uint(v:1)))\r\n  |> filter(fn: (r) => r._measurement == \"DeviceData\" )\r\n  |> filter(fn: (r) => r.Source       == \"[[Source]]\" )\r\n  |> map(fn: (r) => ({\r\n        _field: \"STATUS\",\r\n        _time: r._time, \r\n        _value: float(v: contains(value: int(v: r._value),\r\n                                  set  : StatusValuesForOn ))\r\n      }))\r\n  |> last()\r\n  |> tableFind(fn: (key) => key._field == \"STATUS\"  )\r\n  |> getColumn(column: \"_value\")         \r\n\r\nreturn lastStatusBeforeRange[length(arr:lastStatusBeforeRange)-1]\r\n}\r\n\r\nDeviceData=from(bucket: \"telemetry\")\r\n  |> range([[range]])\r\n  |> filter(fn: (r) => r._measurement == \"DeviceData\" )\r\n  |> filter(fn: (r) => r.Source       == \"[[Source]]\" )\r\n  |> group()\r\n  |> keep(columns: [\"_time\",\"_field\",\"_value\"])\r\n\r\nItemCountGoodData=\r\n  DeviceData\r\n  |> filter(fn: (r) => r._field == \"ITEM_COUNT_GOOD\" )\r\n  |> aggregateWindow(every: 1m, fn: sum)\r\n  |> sum()\r\n  |> map(fn: (r) => ({\r\n     _value: r._value,\r\n     _time: now()\r\n    }))\r\n\r\nStatusData=\r\n  DeviceData\r\n  |> filter(fn: (r) =>  r._field == \"STATUS\")\r\n  |> map(fn: (r) => ({\r\n      _time: r._time, \r\n      _value: float(v: contains(value: int(v: r._value), \r\n                                       set: StatusValuesForOn ))\r\n  }))\r\n\r\nStatusDataWindowed=\r\n  StatusData\r\n  |> aggregateWindow(every: 1m, fn: mean)\r\n  |> fill(column: \"_value\", usePrevious: true) \r\n  |> fill(column: \"_value\", value: fGetLastStatus()) \r\n  |> map(fn: (r) => ({_time: r._time, _value: math.ceil(x: r._value)}))\r\n  \r\nRunningMins=\r\n  StatusDataWindowed\r\n  |> sum()\r\n  |> map(fn: (r) => ({\r\n     _value: r._value,\r\n     _time: now()\r\n    }))\r\n\r\nPerformance=\r\n  join(\r\n    tables: {good: ItemCountGoodData, on: RunningMins},\r\n    on: [\"_time\"]\r\n  )\r\n  |> map(fn: (r) => ({\r\n     _value: if r._value_on == 0.0 or float(v:$idealRunrate) == 0.0 then 0.0 \r\n             else (r._value_good/r._value_on)/float(v:$idealRunrate),\r\n     _time: r._time,\r\n     _value_on : r._value_on, _value_good: r._value_good,\r\n     _field: \"Performance\"\r\n    }))\r\n  |> yield(name: \"Performance\")\r\n",
            "refId": "A"
          }
        ],
        "timeFrom": null,
        "timeShift": null,
        "title": "Performance",
        "type": "gauge"
      },
      {
        "aliasColors": {
          " IdealRunrate": "#6465a5",
          " Performance": "#f49f05"
        },
        "bars": false,
        "dashLength": 10,
        "dashes": false,
        "datasource": "myinfluxdb",
        "fill": 0,
        "fillGradient": 0,
        "gridPos": {
          "h": 8,
          "w": 19,
          "x": 5,
          "y": 24
        },
        "hiddenSeries": false,
        "id": 9,
        "interval": "1m",
        "legend": {
          "alignAsTable": false,
          "avg": true,
          "current": false,
          "max": true,
          "min": true,
          "rightSide": false,
          "show": true,
          "total": false,
          "values": true
        },
        "lines": true,
        "linewidth": 3,
        "nullPointMode": "null",
        "options": {
          "dataLinks": []
        },
        "percentage": false,
        "pointradius": 2,
        "points": false,
        "renderer": "flot",
        "seriesOverrides": [
          {
            "alias": " IdealRunrate",
            "color": "#6465a5",
            "dashes": true,
            "linewidth": 2,
            "yaxis": 2
          }
        ],
        "spaceLength": 10,
        "stack": false,
        "steppedLine": false,
        "targets": [
          {
            "query": "import \"math\"\r\nStatusValuesForOn = [101,105,108]\r\n\r\nfGetLastStatus = () => {\r\nfirstStatusTimestamp=\r\n  from(bucket: \"telemetry\")\r\n  |> range([[range]])\r\n  |> filter(fn: (r) => r._measurement == \"DeviceData\" )\r\n  |> filter(fn: (r) => r.Source       == \"[[Source]]\" )\r\n  |> filter(fn: (r) => r._field       == \"STATUS\" )\r\n  |> first()\r\n  |> tableFind(fn: (key) => key._field == \"STATUS\"  )\r\n  |> getColumn(column: \"_time\")\r\n\r\nlastStatusBeforeRange=\r\nfrom(bucket: \"telemetry\")\r\n  |> range(start:-1000d, \r\n           stop: time(v:uint(v:firstStatusTimestamp[0])-uint(v:1)))\r\n  |> filter(fn: (r) => r._measurement == \"DeviceData\" )\r\n  |> filter(fn: (r) => r.Source       == \"[[Source]]\" )\r\n  |> map(fn: (r) => ({\r\n        _field: \"STATUS\",\r\n        _time: r._time, \r\n        _value: float(v: contains(value: int(v: r._value),\r\n                                  set  : StatusValuesForOn ))\r\n      }))\r\n  |> last()\r\n  |> tableFind(fn: (key) => key._field == \"STATUS\"  )\r\n  |> getColumn(column: \"_value\")         \r\n\r\nreturn lastStatusBeforeRange[length(arr:lastStatusBeforeRange)-1]\r\n}\r\n\r\nDeviceData=from(bucket: \"telemetry\")\r\n  |> range([[range]])\r\n  |> filter(fn: (r) => r._measurement == \"DeviceData\" )\r\n  |> filter(fn: (r) => r.Source       == \"[[Source]]\" )\r\n  |> group()\r\n  |> keep(columns: [\"_time\",\"_field\",\"_value\"])\r\n\r\nItemCountGoodData=\r\n  DeviceData\r\n  |> filter(fn: (r) => r._field == \"ITEM_COUNT_GOOD\" )\r\n  |> aggregateWindow(every: 1m, fn: sum)\r\n  |> cumulativeSum()\r\n\r\nStatusData=\r\n  DeviceData\r\n  |> filter(fn: (r) =>  r._field == \"STATUS\")\r\n  |> map(fn: (r) => ({\r\n      _time: r._time, \r\n      _value: float(v: contains(value: int(v: r._value), \r\n                                       set: StatusValuesForOn ))\r\n  }))\r\n\r\nStatusDataWindowed=\r\n  StatusData\r\n  |> aggregateWindow(every: 1m, fn: mean)\r\n  |> fill(column: \"_value\", usePrevious: true) \r\n  |> fill(column: \"_value\", value: fGetLastStatus()) \r\n  |> map(fn: (r) => ({_time: r._time, _value: math.ceil(x: r._value)}))\r\n  \r\nRunningMins=\r\n  StatusDataWindowed\r\n  |> cumulativeSum()\r\n\r\nPerformance=\r\n  join(\r\n    tables: {good: ItemCountGoodData, on: RunningMins},\r\n    on: [\"_time\"]\r\n  )\r\n  |> map(fn: (r) => ({\r\n     _value: if r._value_on == 0.0 or float(v:$idealRunrate) == 0.0 then 0.0 \r\n             else (r._value_good/r._value_on)/float(v:$idealRunrate),\r\n     _time: r._time,\r\n     _value_on : r._value_on, _value_good: r._value_good,\r\n     _field: \"Performance\"\r\n    }))\r\n|> yield(name: \"Performance\")\r\n\r\nIdealRunrate=\r\n  DeviceData\r\n  |> filter(fn: (r) =>\r\n    r._field == \"STATUS\"\r\n  )\r\n  |> aggregateWindow(every: 1m, fn: sum)\r\n  |> map(fn: (r) => ({\r\n     _value: float(v:$idealRunrate),\r\n     _time: r._time,\r\n     _field: \"IdealRunrate\"\r\n    }))\r\n  |> yield(name: \"IdealRunrate\")",
            "refId": "A",
            "resultFormat": "time_series"
          }
        ],
        "thresholds": [],
        "timeFrom": null,
        "timeRegions": [
          {
            "colorMode": "custom",
            "fill": false,
            "fillColor": "rgba(234, 112, 112, 0.12)",
            "from": "00:00",
            "line": true,
            "lineColor": "#6a8a82",
            "op": "time",
            "to": "08:00"
          },
          {
            "colorMode": "custom",
            "fill": false,
            "fillColor": "rgba(234, 112, 112, 0.12)",
            "from": "08:00",
            "line": true,
            "lineColor": "#6a8a82",
            "op": "time",
            "to": "16:00"
          },
          {
            "colorMode": "custom",
            "fill": false,
            "fillColor": "rgba(234, 112, 112, 0.12)",
            "from": "16:00",
            "line": true,
            "lineColor": "#6a8a82",
            "op": "time",
            "to": "00:00"
          }
        ],
        "timeShift": null,
        "title": "Performance History",
        "tooltip": {
          "shared": true,
          "sort": 0,
          "value_type": "individual"
        },
        "type": "graph",
        "xaxis": {
          "buckets": null,
          "mode": "time",
          "name": null,
          "show": true,
          "values": []
        },
        "yaxes": [
          {
            "decimals": 0,
            "format": "percentunit",
            "label": "Performance%",
            "logBase": 1,
            "max": "1.5",
            "min": null,
            "show": true
          },
          {
            "format": "short",
            "label": null,
            "logBase": 1,
            "max": null,
            "min": null,
            "show": true
          }
        ],
        "yaxis": {
          "align": false,
          "alignLevel": null
        }
      }
    ],
    "refresh": false,
    "schemaVersion": 22,
    "style": "dark",
    "tags": [],
    "templating": {
      "list": [
        {
          "current": {
            "text": "1800",
            "value": "1800"
          },
          "hide": 0,
          "label": "Ideal Run Rate (items/min)",
          "name": "idealRunrate",
          "options": [
            {
              "selected": true,
              "text": "1800",
              "value": "1800"
            }
          ],
          "query": "1800",
          "skipUrlSync": false,
          "type": "constant"
        },
        {
          "allValue": null,
          "current": {
            "text": "urn:edgevm3.internal.cloudapp.net:OPC-Site-01",
            "value": "urn:edgevm3.internal.cloudapp.net:OPC-Site-01"
          },
          "datasource": "myinfluxdb",
          "definition": "from(bucket: \"telemetry\")\n  |> range($range)\n  |> filter(fn: (r) =>\n    r._measurement == \"DeviceData\"\n  )\n\n|> keep(columns:[\"Source\"])\n  |> distinct(column: \"Source\")\n\n\n",
          "hide": 0,
          "includeAll": false,
          "index": -1,
          "label": "Site",
          "multi": false,
          "name": "Source",
          "options": [],
          "query": "from(bucket: \"telemetry\")\n  |> range($range)\n  |> filter(fn: (r) =>\n    r._measurement == \"DeviceData\"\n  )\n\n|> keep(columns:[\"Source\"])\n  |> distinct(column: \"Source\")\n\n\n",
          "refresh": 2,
          "regex": "",
          "skipUrlSync": false,
          "sort": 1,
          "tagValuesQuery": "",
          "tags": [],
          "tagsQuery": "",
          "type": "query",
          "useTags": false
        }
      ]
    },
    "time": {
      "from": "now-30m",
      "to": "now"
    },
    "timepicker": {
      "refresh_intervals": [
        "1m",
        "5m",
        "15m",
        "30m",
        "1h",
        "2h",
        "1d"
      ]
    },
    "timezone": "",
    "title": "Site Level Performance",
    "uid": "WI5udGeWz",
    "variables": {
      "list": []
    },
    "version": 12
  }