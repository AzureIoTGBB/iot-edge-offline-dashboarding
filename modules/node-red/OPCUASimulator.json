[{"id":"66e4a8ad.35ab88","type":"tab","label":"OPC UA Simulator","disabled":false,"info":""},{"id":"84215927.c7a288","type":"inject","z":"66e4a8ad.35ab88","name":"","topic":"","payload":"","payloadType":"date","repeat":"5","crontab":"","once":true,"onceDelay":"0.5","x":230,"y":120,"wires":[["e3fd3002.8d646"]]},{"id":"e3fd3002.8d646","type":"function","z":"66e4a8ad.35ab88","name":"Generate Values","func":"// flow.set('isoInput1', Math.random() + 11.0) interval comes from server\nvar prevStatus = flow.get('status');\nvar prevStatusTimestamp = flow.get('prev_status_timestamp');\nvar curStatus;\nvar itemCountGood;\nvar itemCountBad;\n\nif (Date.now()-prevStatusTimestamp>600000)\n{\n curStatus= (Math.random()<0.9?1.0:0.0);\n prevStatusTimestamp=Date.now();\n    \n}\nelse\n curStatus = prevStatus;\n\n\nif (curStatus===1.0)\n{\n    itemCountGood = 80.0+Math.round(Math.random()*41);\n    itemCountBad = parseFloat(Math.round(Math.random()*11));\n}\nelse\n{\n    itemCountGood = 0.0;\n    itemCountBad = 0.0;\n}\n\nflow.set('prev_status_timestamp', prevStatusTimestamp);\nflow.set('status', curStatus) ;\nflow.set('item_count_good', itemCountGood);\nflow.set('item_count_bad', itemCountBad);\n\nmsg.payload = [\n    flow.get('status'),\n    flow.get('item_count_good'),\n    flow.get('item_count_bad')\n]\nreturn msg;","outputs":1,"noerr":0,"x":460,"y":120,"wires":[["fed1d132.1c45b"]]},{"id":"fed1d132.1c45b","type":"debug","z":"66e4a8ad.35ab88","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":720,"y":120,"wires":[]},{"id":"9d0fcbf7.5d1698","type":"OPCUA-IIoT-Flex-Server","z":"66e4a8ad.35ab88","port":"55480","endpoint":"UA/Simulator0","acceptExternalCommands":true,"maxAllowedSessionNumber":"","maxConnectionsPerEndpoint":"","maxAllowedSubscriptionNumber":"","alternateHostname":"","name":"OPC UA Server","showStatusActivities":false,"showErrors":false,"allowAnonymous":true,"individualCerts":false,"isAuditing":false,"serverDiscovery":true,"users":[],"xmlsets":[],"publicCertificateFile":"","privateCertificateFile":"","registerServerMethod":"1","discoveryServerEndpointUrl":"","capabilitiesForMDNS":"","maxNodesPerRead":1000,"maxNodesPerBrowse":2000,"delayToClose":1000,"addressSpaceScript":"function constructAlarmAddressSpace(server, addressSpace, eventObjects, done) {\n    // server = the created node-opcua server\n    // addressSpace = script placeholder\n    // eventObjects = to hold event variables in memory from this script\n    \n    // internal global sandbox objects are \n    // node = node of the flex server, \n    // coreServer = core iiot server object for debug and access to nodeOPCUA,\n    // and scriptObjects to hold variables and functions\n    const opcua = coreServer.core.nodeOPCUA\n    const LocalizedText = opcua.LocalizedText;\n    const namespace = addressSpace.getOwnNamespace();\n    \n    coreServer.internalDebugLog('init dynamic address space')\n    node.warn('SIMULATOR: construct new address space for OPC UA')\n    \n    const Variant = opcua.Variant;\n    const DataType = opcua.DataType;\n    const DataValue = opcua.DataValue;\n\n    var flexServerInternals = this;\n    \n    this.sandboxFlowContext.set(\"status\", 0);\n    this.sandboxFlowContext.set(\"item_count_good\", 0);\n    this.sandboxFlowContext.set(\"item_count_bad\", 0);\n    this.sandboxFlowContext.set(\"prev_status_timestamp\", Date.now()-600000);\n\n\n    coreServer.internalDebugLog(\"init dynamic address space\");\n    const rootFolder = addressSpace.findNode(\"RootFolder\");\n    \n    node.warn(\"SIMULATOR: construct new address space for OPC UA\");\n    \n    const myDevice = namespace.addFolder(rootFolder.objects, {\n    \"browseName\": \"Simulation\"\n    });\n\n    const varStatus = namespace.addVariable({\n    \"organizedBy\": myDevice,\n    \"browseName\": \"STATUS\",\n    \"nodeId\": \"ns=1;s=STATUS\",\n    \"dataType\": \"Double\",\n    \"value\": {\n      \"get\": function() {\n        return new Variant({\n          \"dataType\": DataType.Double,\n          \"value\": flexServerInternals.sandboxFlowContext.get(\"status\")\n        });\n      },\n      \"set\": function(variant) {\n        flexServerInternals.sandboxFlowContext.set(\n          \"status\",\n          parseFloat(variant.value)\n        );\n        return opcua.StatusCodes.Good;\n      }\n    }\n    });\n\n    const varItemCountGood = namespace.addVariable({\n    \"organizedBy\": myDevice,\n    \"browseName\": \"ITEM_COUNT_GOOD\",\n    \"nodeId\": \"ns=1;s=ITEM_COUNT_GOOD\",\n    \"dataType\": \"Double\",\n    \"value\": {\n      \"get\": function() {\n        return new Variant({\n          \"dataType\": DataType.Double,\n          \"value\": flexServerInternals.sandboxFlowContext.get(\"item_count_good\")\n        });\n      },\n      \"set\": function(variant) {\n        flexServerInternals.sandboxFlowContext.set(\n          \"item_count_good\",\n          parseFloat(variant.value)\n        );\n        return opcua.StatusCodes.Good;\n      }\n    }\n    });\n    \n    const varItemCountBad = namespace.addVariable({\n    \"organizedBy\": myDevice,\n    \"browseName\": \"ITEM_COUNT_BAD\",\n    \"nodeId\": \"ns=1;s=ITEM_COUNT_BAD\",\n    \"dataType\": \"Double\",\n    \"value\": {\n      \"get\": function() {\n        return new Variant({\n          \"dataType\": DataType.Double,\n          \"value\": flexServerInternals.sandboxFlowContext.get(\"item_count_bad\")\n        });\n      },\n      \"set\": function(variant) {\n        flexServerInternals.sandboxFlowContext.set(\n          \"item_count_bad\",\n          parseFloat(variant.value)\n        );\n        return opcua.StatusCodes.Good;\n      }\n    }\n    });\n    \n    coreServer.internalDebugLog(\"create dynamic address space done\");\n    node.warn(\"SIMULATOR: construction of new address space for OPC UA done\");\n    \n    done();\n}\n","x":260,"y":280,"wires":[[]]}]